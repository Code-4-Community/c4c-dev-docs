{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"C4C Dev Docs C4C Dev Docs holds all technical documentation for our applications and projects. The goal of this site is to bring existing information together to a single, searchable, and pleasant UI. As of now, we've copied over the LLB and SFTT API specs. There is some work to update those to be more user-friendly for this site, but I'm very happy with how MkDocs took our existing Markdown files and created this site so effortlessly. Other things to expect to see here: general repo setup guide for our major projects, DevOps/Deployment overview for LLB/SFTT cloud pipelines, Jumpstart course material... Local Installation This repo uses two Python packages, MkDocs and Material for MkDocs , to generate a static documentation site for C4C repos. Pages are written in Markdown. Pre-requisite: python3 (installation guide) Install the required Python packages: pip install mkdocs pip install mkdocs-material Previewing Locally MkDocs includes a live preview server, so you can preview your changes as you write your documentation. The server will automatically rebuild the site upon saving. Start it with: mkdocs serve Point your browser to localhost:8000 Building your site When you're finished editing, you can build a static site from your Markdown files with: mkdocs build The contents of this directory make up your project documentation. There's no need for operating a database or server, as it is completely self-contained. The site can be hosted on GitHub Pages, GitLab Pages, a CDN of your choice or your private web space. Adding a Page (local copy of repo) Add a Markdown file to the docs/ directory. Edit the navigation in mkdocs.yml . The structure is well documented here . To publish your changes, create a PR. git checkout -b JB_update_llb-docs git add . git commit -m 'updating docs' git push (set upstream if needed) Include a screenshot of what your new changes look like in your PR. When merged, your changes will automatically be deployed to our site. Contributing without Local Installation You can make edits right on GitHub easily as well, the downside is that you cannot preview what those changes will look like in the final MkDocs generated site, so this is preferred for small tweaks rather than adding new pages entirely. To contribute online, simply click the edit logo (the pen) in the top right corner of this page. This will take you to GitHub, where you can make whatever changes you'd like to the Markdown file which generates the page you were on. When you're done with your edits, simply write an update message, and select create a new branch for this commit and start a pull request . Submit your PR, and it'll be reviewed the same as any others.","title":"Home"},{"location":"#c4c-dev-docs","text":"C4C Dev Docs holds all technical documentation for our applications and projects. The goal of this site is to bring existing information together to a single, searchable, and pleasant UI. As of now, we've copied over the LLB and SFTT API specs. There is some work to update those to be more user-friendly for this site, but I'm very happy with how MkDocs took our existing Markdown files and created this site so effortlessly. Other things to expect to see here: general repo setup guide for our major projects, DevOps/Deployment overview for LLB/SFTT cloud pipelines, Jumpstart course material...","title":"C4C Dev Docs"},{"location":"#local-installation","text":"This repo uses two Python packages, MkDocs and Material for MkDocs , to generate a static documentation site for C4C repos. Pages are written in Markdown.","title":"Local Installation"},{"location":"#pre-requisite-python3-installation-guide","text":"Install the required Python packages: pip install mkdocs pip install mkdocs-material","title":"Pre-requisite: python3 (installation guide)"},{"location":"#previewing-locally","text":"MkDocs includes a live preview server, so you can preview your changes as you write your documentation. The server will automatically rebuild the site upon saving. Start it with: mkdocs serve Point your browser to localhost:8000","title":"Previewing Locally"},{"location":"#building-your-site","text":"When you're finished editing, you can build a static site from your Markdown files with: mkdocs build The contents of this directory make up your project documentation. There's no need for operating a database or server, as it is completely self-contained. The site can be hosted on GitHub Pages, GitLab Pages, a CDN of your choice or your private web space.","title":"Building your site"},{"location":"#adding-a-page-local-copy-of-repo","text":"Add a Markdown file to the docs/ directory. Edit the navigation in mkdocs.yml . The structure is well documented here . To publish your changes, create a PR. git checkout -b JB_update_llb-docs git add . git commit -m 'updating docs' git push (set upstream if needed) Include a screenshot of what your new changes look like in your PR. When merged, your changes will automatically be deployed to our site.","title":"Adding a Page (local copy of repo)"},{"location":"#contributing-without-local-installation","text":"You can make edits right on GitHub easily as well, the downside is that you cannot preview what those changes will look like in the final MkDocs generated site, so this is preferred for small tweaks rather than adding new pages entirely. To contribute online, simply click the edit logo (the pen) in the top right corner of this page. This will take you to GitHub, where you can make whatever changes you'd like to the Markdown file which generates the page you were on. When you're done with your edits, simply write an update message, and select create a new branch for this commit and start a pull request . Submit your PR, and it'll be reviewed the same as any others.","title":"Contributing without Local Installation"},{"location":"api-spec-example/","text":"API Specification Template This is a template for how API endpoints should be documented and defined. This section would include a high level description of what the API is used for and why someone would use it. You should also specify anything here that is common to all endpoints, i.e. content type, common body elements, ect... When writing specifications, you only need to include sections that are relevant to each endpoint. For example, if your endpoint didn't have any route parameters then you would not include a section for route parameters. Any route parameters that should appear in an endpoint should be written with a colon in front of it, path/:param1/path/:param2 . You do not need to specify any kind of 5XX type responses in a specification, 5XX level messages should never be returned in a production API. Notes About Ordering The routes defined in the API should be defined with top level routes first and then sub-routes, i.e. /animal before /animal/dog . For any route with multiple methods or same level routes with similar functionality, define GET then POST then PUT . In response definitions define all 2XX responses before any 4XX . Structure of Endpoint Specification METHOD /path/:of/route A short description of what this route is used for and what it does. Route Parameters path_parameter_1: PARAMETER_TYPE What this path parameter is used for and what it represents path_parameter_2: PARAMETER_TYPE ... Query Parameters query_parameter_1: PARAMETER_TYPE What this query parameter is used for and how it changes the request. Request Body { \"FIELD0\" : \"Making a request\" , \"FIELD1\" : STRING , \"FIELD2\" : [ { \"ARRAY_FIELD1\" : INTEGER , \"ARRAY_FIELD2\" : WEIRD_TYPE 1 }, ... ], \"FIELD3\" : WEIRD_TYPE 2 } Any non-standard type has to be explained here or in the common section if the type is used in many requests. A WEIRD_TYPE1 is an INTEGER between -4 and 5 inclusive. A WEIRD_TYPE2 is an array of even size in the following form: [ INTEGER , STRING , ... ] Responses XXX Status Code Message A quick description of what this response means and why it might've been displayed. { \"FIELD0\" : \"YES\" , \"FIELD1\" : INTEGER } XXX Status Code Message ..... Example Note API This is an example of an API for a basic note service that can get, create and update notes. All request and response bodies will be of type JSON and include an appropriate Content-Type: application/json header. GET /api/note Used for getting one or all of the notes in the database. Query Parameters note_id: INTEGER Get a note that has this specific ID. Responses 200 OK Every thing is okay. If there were any potentially confusing fields in the response body you would explain what they mean and what they're for here. { \"status\" : \"OK\" , \"notes\" : [ { \"id\" : INTEGER , \"title\" : STRING , \"content\" : STRING , \"date\" : DATE }, ... ] } Any non standard data types that you use in your body specification you would specify here. For types that are used in multiple endpoints, consider adding their definitions as a section at the top of the document. A DATE is a String in the format: \"MM-DD-YYYY HH:MM:ss\" 400 BAD REQUEST This happens if the client sends a request that does not conform to the standard outlined above. { \"status\" : \"BAD REQUEST\" , \"reason\" : STRING } POST /api/note Used for creating one or more notes to be stored in the database. Request Body { \"notes\" : [ { \"title\" : STRING , \"content\" : STRING }, ... ] } Responses 200 OK The notes were successfully created. { \"status\" : \"OK\" } 400 BAD REQUEST The request body was malformed according to the specification. { \"status\" : \"BAD REQUEST\" , \"reason\" : STRING }","title":"API Spec Example"},{"location":"api-spec-example/#api-specification-template","text":"This is a template for how API endpoints should be documented and defined. This section would include a high level description of what the API is used for and why someone would use it. You should also specify anything here that is common to all endpoints, i.e. content type, common body elements, ect... When writing specifications, you only need to include sections that are relevant to each endpoint. For example, if your endpoint didn't have any route parameters then you would not include a section for route parameters. Any route parameters that should appear in an endpoint should be written with a colon in front of it, path/:param1/path/:param2 . You do not need to specify any kind of 5XX type responses in a specification, 5XX level messages should never be returned in a production API.","title":"API Specification Template"},{"location":"api-spec-example/#notes-about-ordering","text":"The routes defined in the API should be defined with top level routes first and then sub-routes, i.e. /animal before /animal/dog . For any route with multiple methods or same level routes with similar functionality, define GET then POST then PUT . In response definitions define all 2XX responses before any 4XX .","title":"Notes About Ordering"},{"location":"api-spec-example/#structure-of-endpoint-specification","text":"","title":"Structure of Endpoint Specification"},{"location":"api-spec-example/#method-pathofroute","text":"A short description of what this route is used for and what it does.","title":"METHOD /path/:of/route"},{"location":"api-spec-example/#route-parameters","text":"","title":"Route Parameters"},{"location":"api-spec-example/#path_parameter_1-parameter_type","text":"What this path parameter is used for and what it represents","title":"path_parameter_1: PARAMETER_TYPE"},{"location":"api-spec-example/#path_parameter_2-parameter_type","text":"...","title":"path_parameter_2: PARAMETER_TYPE"},{"location":"api-spec-example/#query-parameters","text":"","title":"Query Parameters"},{"location":"api-spec-example/#query_parameter_1-parameter_type","text":"What this query parameter is used for and how it changes the request.","title":"query_parameter_1: PARAMETER_TYPE"},{"location":"api-spec-example/#request-body","text":"{ \"FIELD0\" : \"Making a request\" , \"FIELD1\" : STRING , \"FIELD2\" : [ { \"ARRAY_FIELD1\" : INTEGER , \"ARRAY_FIELD2\" : WEIRD_TYPE 1 }, ... ], \"FIELD3\" : WEIRD_TYPE 2 } Any non-standard type has to be explained here or in the common section if the type is used in many requests. A WEIRD_TYPE1 is an INTEGER between -4 and 5 inclusive. A WEIRD_TYPE2 is an array of even size in the following form: [ INTEGER , STRING , ... ]","title":"Request Body"},{"location":"api-spec-example/#responses","text":"","title":"Responses"},{"location":"api-spec-example/#xxx-status-code-message","text":"A quick description of what this response means and why it might've been displayed. { \"FIELD0\" : \"YES\" , \"FIELD1\" : INTEGER }","title":"XXX Status Code Message"},{"location":"api-spec-example/#xxx-status-code-message_1","text":".....","title":"XXX Status Code Message"},{"location":"api-spec-example/#example-note-api","text":"This is an example of an API for a basic note service that can get, create and update notes. All request and response bodies will be of type JSON and include an appropriate Content-Type: application/json header.","title":"Example Note API"},{"location":"api-spec-example/#get-apinote","text":"Used for getting one or all of the notes in the database.","title":"GET /api/note"},{"location":"api-spec-example/#query-parameters_1","text":"","title":"Query Parameters"},{"location":"api-spec-example/#note_id-integer","text":"Get a note that has this specific ID.","title":"note_id: INTEGER"},{"location":"api-spec-example/#responses_1","text":"","title":"Responses"},{"location":"api-spec-example/#200-ok","text":"Every thing is okay. If there were any potentially confusing fields in the response body you would explain what they mean and what they're for here. { \"status\" : \"OK\" , \"notes\" : [ { \"id\" : INTEGER , \"title\" : STRING , \"content\" : STRING , \"date\" : DATE }, ... ] } Any non standard data types that you use in your body specification you would specify here. For types that are used in multiple endpoints, consider adding their definitions as a section at the top of the document. A DATE is a String in the format: \"MM-DD-YYYY HH:MM:ss\"","title":"200 OK"},{"location":"api-spec-example/#400-bad-request","text":"This happens if the client sends a request that does not conform to the standard outlined above. { \"status\" : \"BAD REQUEST\" , \"reason\" : STRING }","title":"400 BAD REQUEST"},{"location":"api-spec-example/#post-apinote","text":"Used for creating one or more notes to be stored in the database.","title":"POST /api/note"},{"location":"api-spec-example/#request-body_1","text":"{ \"notes\" : [ { \"title\" : STRING , \"content\" : STRING }, ... ] }","title":"Request Body"},{"location":"api-spec-example/#responses_2","text":"","title":"Responses"},{"location":"api-spec-example/#200-ok_1","text":"The notes were successfully created. { \"status\" : \"OK\" }","title":"200 OK"},{"location":"api-spec-example/#400-bad-request_1","text":"The request body was malformed according to the specification. { \"status\" : \"BAD REQUEST\" , \"reason\" : STRING }","title":"400 BAD REQUEST"},{"location":"mkdocs-starter/","text":"All About MkDocs, Markdown, and Contributing to This Resource I don't know how often it'll be needed, but all you need to know about MkDocs can be found on their amazing website. mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server (you likely only need this one) mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. Super important. docs/ index.md # The documentation homepage. mkdocs-starter.md # This page llb/ index.md # Not built yet llb-api-spec.md # Needs to be updated llb-auth-api.md # Should be abstracted away sftt/ index.md # Not built yet sftt-api-spec.md # Needs to be updated sftt-auth-api.md # Should be abstracted away img/ favicon.ico # Icon for browser tab Material-MkDocs What's much more important than how MkDocs internally works is how to use our theme, Material for MkDocs . The Setup Documentation is an excellent resource for site customization + configuration needs - changing colors, fonts, icons, navigation... they even support a comment system !! The Reference Documentation offers a lot of awesome features to make the site much more approachable. code blocks - obviously we'll need these data tables lists - could be good for tracking live course progress in jumpstart Many require extensions, which are no issue to add. They live in mkdocs.yml . All extensions we've installed are listed below. Please add an example of any extension you add here. Extensions Admonitions Admonitions, also known as call-outs, are an excellent choice for including side content without significantly interrupting the document flow. Material for MkDocs provides several different types of admonitions and allows for the inclusion and nesting of arbitrary content. Docs admonition Important! Here's a very important reason or explanation I don't want you to miss Source: !!! info \"Important!\" Here's a very important reason or explanation I don't want you to miss pymdownx.details Example Prefer Here is a preferred method of doing some development task. Follow this best practice! Avoid Here's a less good way to do it. Don't do it this way. Source ???+ example ???+ success \"Prefer\" Here is a preferred method of doing some development task. Follow this best practice! ???+ fail \"Avoid\" Here's a less good way to do it. Don't do it this way. More examples Docs - Material","title":"MkDocs"},{"location":"mkdocs-starter/#all-about-mkdocs-markdown-and-contributing-to-this-resource","text":"I don't know how often it'll be needed, but all you need to know about MkDocs can be found on their amazing website. mkdocs.org .","title":"All About MkDocs, Markdown, and Contributing to This Resource"},{"location":"mkdocs-starter/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server (you likely only need this one) mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"mkdocs-starter/#project-layout","text":"mkdocs.yml # The configuration file. Super important. docs/ index.md # The documentation homepage. mkdocs-starter.md # This page llb/ index.md # Not built yet llb-api-spec.md # Needs to be updated llb-auth-api.md # Should be abstracted away sftt/ index.md # Not built yet sftt-api-spec.md # Needs to be updated sftt-auth-api.md # Should be abstracted away img/ favicon.ico # Icon for browser tab","title":"Project layout"},{"location":"mkdocs-starter/#material-mkdocs","text":"What's much more important than how MkDocs internally works is how to use our theme, Material for MkDocs . The Setup Documentation is an excellent resource for site customization + configuration needs - changing colors, fonts, icons, navigation... they even support a comment system !! The Reference Documentation offers a lot of awesome features to make the site much more approachable. code blocks - obviously we'll need these data tables lists - could be good for tracking live course progress in jumpstart Many require extensions, which are no issue to add. They live in mkdocs.yml . All extensions we've installed are listed below. Please add an example of any extension you add here.","title":"Material-MkDocs"},{"location":"mkdocs-starter/#extensions","text":"","title":"Extensions"},{"location":"mkdocs-starter/#admonitions","text":"Admonitions, also known as call-outs, are an excellent choice for including side content without significantly interrupting the document flow. Material for MkDocs provides several different types of admonitions and allows for the inclusion and nesting of arbitrary content. Docs","title":"Admonitions"},{"location":"mkdocs-starter/#admonition","text":"Important! Here's a very important reason or explanation I don't want you to miss Source: !!! info \"Important!\" Here's a very important reason or explanation I don't want you to miss","title":"admonition"},{"location":"mkdocs-starter/#pymdownxdetails","text":"Example Prefer Here is a preferred method of doing some development task. Follow this best practice! Avoid Here's a less good way to do it. Don't do it this way. Source ???+ example ???+ success \"Prefer\" Here is a preferred method of doing some development task. Follow this best practice! ???+ fail \"Avoid\" Here's a less good way to do it. Don't do it this way.","title":"pymdownx.details"},{"location":"mkdocs-starter/#more-examples","text":"Docs - Material","title":"More examples"},{"location":"llb/","text":"Lucy's Love Bus API Spec Auth API","title":"Home"},{"location":"llb/#lucys-love-bus","text":"API Spec Auth API","title":"Lucy's Love Bus"},{"location":"llb/llb-api-spec/","text":"LLB API Specification Any routes with the protected path are routes and require a valid JWT token. This token must be placed in the header with the name \"access_token\". Any response of 401 UNAUTHORIZED with the following body indicates that the user's access_token is expired. In this case the client should initiate a new login, or call the refresh route with a valid refresh_token JWT to recieve a new access_token. \"Given access_token is expired\" Table Of Contents Getting Events GET api/v1/protected/events/qualified GET api/v1/protected/events/signed_up GET api/v1/protected/events?ids=1,2,3,... Single Event GET api/v1/protected/events/:event_id GET api/v1/protected/events/:event_id/registrations POST api/v1/protected/events/ PUT api/v1/protected/events/:event_id DELETE api/v1/protected/events/:event_id Account Creation Flow POST api/v1/protected/requests GET api/v1/protected/requests POST api/v1/protected/requests/:request_id/approve POST api/v1/protected/requests/:request_id/reject GET api/v1/protected/requests/:request_id Site Announcements GET api/v1/protected/announcements GET api/v1/protected/announcements/:event_id POST api/v1/protected/announcements POST api/v1/protected/announcements/:event_id DELETE /api/v1/protected/announcements/:announcement_id Event Checkout and Registration POST api/v1/protected/checkout/register PUT api/v1/protected/checkout/register/:event_id POST api/v1/webhooks/stripe Getting Events GET api/v1/protected/events/qualified Get a list of events that the calling user is qualified for. This includes events a user is already signed up for. For General Public: Any event happening in the next 5 days are eligible. For Participating Families: Any event happening in the future. For Admins: Any event happening in the future. Query Params start: DATE-STRING The beginning date of when to get events from. All returned events will happen ON or after the given date string that is given in mm/dd/yyyy format, ie: 01/19/2020 end: DATE-STRING The latest date of when to get events from. All returned events will happen ON or before the given date string that is given in mm/dd/yyyy format, ie: 12/03/2009 count: INTEGER The maximum number of events to return. The route will return AT MOST count number of events. Responses 200 OK The events were sent successfully. { \"events\" : [ { \"id\" : ID , \"title\" : STRING , \"spotsAvailable\" : INT , \"capacity\" : INT , \"thumbnail\" : URL , \"ticketCount\" : INT , \"canRegister\" : BOOLEAN , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } }, ... ], \"totalCount\" : INTEGER } ticketCount is the number of tickets the calling user has reserved for this event. It will be 0 if the user is not registered for the event. canRegister is dependent on the privilege level of the calling user. GPs are only able to register for events that are happening in the next 5 days. GET api/v1/protected/events/signed_up Get all of the events happening in the future that the given user is signed up for. Query Params start: DATE-STRING The beginning date of when to get events from. All returned events will happen ON or after the given date string that is given in mm/dd/yyyy format, ie: 01/19/2020 end: DATE-STRING The latest date of when to get events from. All returned events will happen ON or before the given date string that is given in mm/dd/yyyy format, ie: 12/03/2009 count: INTEGER The maximum number of events to return. The route will return AT MOST count number of events. Responses 200 OK The events were sent successfully. { \"events\" : [ { \"id\" : ID , \"title\" : STRING , \"spotsAvailable\" : INT , \"capacity\" : INT , \"thumbnail\" : URL , \"ticketCount\" : INT , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } }, ... ], \"totalCount\" : INTEGER } ticketCount is the number of tickets the calling user has reserved for this event. It will be 0 if the user is not registered for the event. GET api/v1/protected/events?ids=1,2,3,... Get the event bodies for the events with the ids that are specified in the query parameter. Query Params ids: INT-LIST The event ids that are being requested. Ids are numbers and they should be seperated by a single comma. If this query parameter is missing, this route returns an empty list. Ignore duplicated values. Ignore ids that do not correspond to any existing event. Responses Equivelent to above routes: { \"events\" : [ { \"id\" : ID , \"title\" : STRING , \"spotsAvailable\" : INT , \"capacity\" : INT , \"thumbnail\" : URL , \"ticketCount\" : INT , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } }, ... ], \"totalCount\" : INTEGER } Single Event GET api/v1/protected/events/:event_id Gets a specific event with the specified id. Route Params event_id: ID The id number of the event that is being queried. Responses 200 OK The event was retrieved successfully. { \"id\" : ID , \"title\" : STRING , \"spotsAvailable\" : INT , \"capacity\" : INT , \"thumbnail\" : URL , \"ticketCount\" : INT , \"canRegister\" : BOOLEAN , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } } ticketCount is the number of tickets the calling user has reserved for this event. It will be 0 if the user is not registered for the event. canRegister is dependent on the privilege level of the calling user. GPs are only able to register for events that are happening in the next 5 days. canRegister does not check if the calling user is already signed up for this event. GET api/v1/protected/events/:event_id/registrations Gets a list of users registered for the event with the given id. Route Params event_id: ID The id number of the event that is being queried. Responses 200 OK The event was retrieved successfully. { \"registrations\" : [ { \"firstName\" : STRING , \"lastName\" : STRING \"email\" : STRING , \"ticketCount\" : INT }, ... ] } 400 BAD REQUEST There does not exist an event with id: <id> If the provided event id does not exist 401 Unauthorized The calling user does not have the required privilege level If the calling user is not an admin. POST api/v1/protected/events/ Create a new event. This route must be called by an admin. Request Body { \"title\" : STRING , \"spotsAvailable\" : INT , \"capacity\" : INT , \"thumbnail\" : URL , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } } There is an open question on how thumbnails should be handled. Responses 200 OK The event was created successfully. Will return the event that was just created (including the generated id). { \"id\" : ID , \"title\" : STRING , \"spotsAvailable\" : INT , \"capacity\" : INT , \"thumbnail\" : URL , \"ticketCount\" : INT , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } } 401 Unauthorized The calling user does not have the required privilege level If the calling user is not an admin. PUT api/v1/protected/events/:event_id Update an existing event. This route must be called by an admin. All fields are optional. Request Body { \"title\" : STRING , \"spotsAvailable\" : INT , \"thumbnail\" : URL , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } } Responses 200 OK The event was updated successfully. Will return the event that was just created (including the generated id). { \"id\" : ID , \"title\" : STRING , \"spotsAvailable\" : INT , \"thumbnail\" : URL , \"ticketCount\" : INT , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } } 401 Unauthorized The calling user does not have the required privilege level If the calling user is not an admin. 409 Conflict This response occurs when spotsAvailable is less than the number of users currently registered for the event. DELETE api/v1/protected/events/:event_id Delete an existing event. This route must be called by an admin. Responses 200 OK The event was deleted successfully. Returns the ID of the deleted event. { \"id\" : ID } 401 Unauthorized The calling user does not have the required privilege level If the calling user is not an admin. Account Creation Flow POST api/v1/protected/requests Making a request to be upgraded from GP to PF. Must be made by a GP user. Potentially adding bottle nose to prevent multiple denied requests. Allow multiple outstanding requests? Responses 200 OK 429 TOO MANY REQUESTS GET api/v1/protected/requests Getting all active requests. Must be called by an admin. Responses 200 OK { \"requests\" : [ { \"id\" : \"request_id STRING\" , \"user\" : { \"id\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"email\" : STRING , \"phoneNumber\" : STRING } }, ... ] } 401 Unauthorized The calling user does not have the required privilege level If the calling user is not an admin. GET /api/v1/protected/requests/:request_id Gets all the information associated with the account that made this request. Params request_id is the id number of this request. Response 200 OK { \"mainContact\" : { \"id\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, \"additionalContacts\" : [ { \"id\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"email\" : EMAIL , \"shouldSendEmails\" : BOOLEAN , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, ... ], \"children\" : [ { \"id\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"pronouns\" : STRING , \"school\" : STRING , \"schoolYear\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medications\" : STRING OR NULL , \"notes\" : STRING OR NULL , } ... ], \"location\" : { \"address\" : STRING , \"city\" : STRING , \"state\" : STRING , \"zipCode\" : STRING }, \"accountType\" : PRIVILEGE_LEVEL } PRIVILEGE_LEVEL is one of \"GP\", \"PF\", or \"ADMIN\". Note that this is included so that this response matches the response for getting all of a user's information even though it will always be GP in this case. POST api/v1/protected/requests/:request_id/approve POST api/v1/protected/requests/:request_id/reject Approving or rejecting a request by a user to become a PF. Must be called by an admin. Path Params requst_id The id of the request that is being modified. Responses 200 OK 401 Unauthorized The calling user does not have the required privilege level If the calling user is not an admin. GET api/v1/protected/requests/status Getting the statuses of all requests the calling user has made to become a PF. Responses 200 OK { \"requests\" : [ { \"id\" : INT , \"status\" : \"APPROVED\" | \"REJECTED\" | \"PENDING\" , \"created\" : TIMESTAMP }, ... ] } Site Announcements NOTE: Site-wide and event specific announcements have uniquely identifying ID numbers. GET api/v1/protected/announcements Gets a list of site-wide announcements. The announcements will be returned in chronological order, from newest to oldest. Query Params start: DATE-STRING The beginning date of when to get announcements from. All returned announcements are created ON or after the given date string that is given in mm/dd/yyyy format, e.g. 01/19/2020. Defaults to 3 weeks from end or the current date. end: DATE-STRING The end date of when to get announcements from. All returned announcements will happen ON or before the given date string that is given in mm/dd/yyyy format, e.g. 12/03/2009. Defaults to the current date. count: INTEGER The maximum number of announcements to return. The route will return AT MOST count number of announcements. Defaults to 50 or all events that exist. Responses 200 OK The announcements were retrieved successfully. { \"announcements\" : [ { \"id\" : ID , \"title\" : STRING , \"description\" : STRING , \"created\" : TIMESTAMP }, ... ], \"totalCount\" : INTEGER } GET api/v1/protected/announcements/:event_id Get any announcements that are specific to a particular event. Events can have multiple announcements associated with them. Announcements should be returned in order of how recent they were created. Path Params event_id The ID of the event whose announcements are being queried Responses 200 OK The announcements were retrieved successfully. { \"announcements\" : [ { \"id\" : ID , \"title\" : STRING , \"description\" : STRING , \"created\" : TIMESTAMP , \"event_id\" : ID }, ... ], \"totalCount\" : INTEGER } POST api/v1/protected/announcements Creates a new site-wide announcement. Can only be accessed by admins. Request Body: { \"announcement\" : { \"title\" : STRING , \"description\" : STRING } } Responses 200 OK The announcement was created successfully. { \"id\" : ID , \"title\" : STRING , \"description\" : STRING , \"created\" : TIMESTAMP } 401 Unauthorized The calling user does not have the required privilege level If the calling user is not an admin. POST api/v1/protected/announcements/:event_id Creates a new announcement for the given event. Can only be accessed by admins. Request Body: { \"title\" : STRING , \"description\" : STRING } Responses 200 OK The announcement was created successfully. { \"id\" : ID , \"title\" : STRING , \"description\" : STRING , \"created\" : TIMESTAMP , \"event_id\" : ID } 401 Unauthorized The calling user does not have the required privilege level If the calling user is not an admin. DELETE /api/v1/protected/announcements/:announcement_id Deletes an announcment with the specified announcment id. This route can be used to delete site-wide or event specific because they have unique announcement identifiers. This route can only be called by an admin. Path Params announcment_id The ID of the announcement being deleted. Requests 200 OK The announcement was deleted successfully. 401 Unauthorized The calling user does not have the required privilege level If the calling user is not an admin. Event Checkout and Registration The events in a user's cart are stored in Vuex on the frontend in the cart module. POST api/v1/protected/checkout/register Accepts a non-empty list of events to register the user for and creates records in the USER_EVENTS table. If called by an ADMIN or a PF user, it skips anything to do with Stripe and payments. If called by a GP, the EVENT_REGISTRATIONS records are initially persisted as \"invalid\" with the CheckoutSessionID of the Stripe endpoint we create. When the checkout is successfully completed, the EVENT_REGISTRATIONS records have their statuses updated to \"active\". How does Stripe work? When a GP clicks register, we call this route, which will create a Stripe Checkout Session. The ID is returned to the frontend by this API. The ID is used to redirect the user to a page in Stripe's application, where they can pay. Upon a valid payment completion, Stripe triggers our webhook, and when it receives a 200 code Stripe will redirect to the success URL. Request Body { \"lineItems\" : [ { \"eventId\" : INT , \"quantity\" : INT }, ... ] } Responses 200 OK The purchase was successful. 202 ACCEPTED Checkout session created, response contains the ID. 400 BAD REQUEST The request syntax is malformed, e.g. the given list of events is empty. 401 UNAUTHORIZED The user is not eligible to sign up for one or more of the requested events. 404 NOT FOUND One or more of the event IDs is invalid. 409 CONFLICT The user has requested a number of tickets that exceeds the capacity for one or more of the requested events. PUT api/v1/protected/checkout/register/:event_id Changes the number of tickets a user has for the specified event. If the user is a GP and the new number of tickets is greater than the number of tickets the user previously had, a Stripe checkout session will be created. The new number of tickets must be within the event's capacity and must be greater than or equal to 0. If a GP user decreases the number of tickets, the price of the removed tickets will be added to their account balance. Request Body { \"quantity\" : INT } Responses 200 OK The change in tickets was successful. 202 ACCEPTED Checkout session created, response contains the ID. 401 UNAUTHORIZED The user is not eligible to sign up for the event. 404 NOT FOUND The event ID is invalid. 409 CONFLICT The user has requested a number of tickets that exceeds the capacity for the event. POST api/v1/webhooks/stripe A webhook for Stripe to send events to. See Step 4 of these docs: https://stripe.com/docs/payments/checkout/one-time Stripe Webhook Documentation: https://stripe.com/docs/webhooks Request Body The body we care about is a Session object as defined by the Stripe Java library. We use only the Checkout Session ID, marking USER_EVENTS records that are invalid with the same Checkout Session ID as valid. Responses 200 OK Generally, a lot of problems are caused when we don't return a 200 code. It's the equivalent of Stripe saying \"OK, we authorized this payment!\" and us saying \"Wait, something's wrong, don't charge them\". Idk what the actual implementation details are, but generally, Stripe will send more types of events to our hook than just the checkout.session.completed event that we care about. For other events, we just return 200. 400 BAD REQUEST This shouldn't happen... 401 UNAUTHORIZED We're using webhook signatures to authorize this endpoint.","title":"LLB API Specification"},{"location":"llb/llb-api-spec/#llb-api-specification","text":"Any routes with the protected path are routes and require a valid JWT token. This token must be placed in the header with the name \"access_token\". Any response of 401 UNAUTHORIZED with the following body indicates that the user's access_token is expired. In this case the client should initiate a new login, or call the refresh route with a valid refresh_token JWT to recieve a new access_token. \"Given access_token is expired\"","title":"LLB API Specification"},{"location":"llb/llb-api-spec/#table-of-contents","text":"Getting Events GET api/v1/protected/events/qualified GET api/v1/protected/events/signed_up GET api/v1/protected/events?ids=1,2,3,... Single Event GET api/v1/protected/events/:event_id GET api/v1/protected/events/:event_id/registrations POST api/v1/protected/events/ PUT api/v1/protected/events/:event_id DELETE api/v1/protected/events/:event_id Account Creation Flow POST api/v1/protected/requests GET api/v1/protected/requests POST api/v1/protected/requests/:request_id/approve POST api/v1/protected/requests/:request_id/reject GET api/v1/protected/requests/:request_id Site Announcements GET api/v1/protected/announcements GET api/v1/protected/announcements/:event_id POST api/v1/protected/announcements POST api/v1/protected/announcements/:event_id DELETE /api/v1/protected/announcements/:announcement_id Event Checkout and Registration POST api/v1/protected/checkout/register PUT api/v1/protected/checkout/register/:event_id POST api/v1/webhooks/stripe","title":"Table Of Contents"},{"location":"llb/llb-api-spec/#getting-events","text":"","title":"Getting Events"},{"location":"llb/llb-api-spec/#get-apiv1protectedeventsqualified","text":"Get a list of events that the calling user is qualified for. This includes events a user is already signed up for. For General Public: Any event happening in the next 5 days are eligible. For Participating Families: Any event happening in the future. For Admins: Any event happening in the future.","title":"GET api/v1/protected/events/qualified"},{"location":"llb/llb-api-spec/#query-params","text":"","title":"Query Params"},{"location":"llb/llb-api-spec/#start-date-string","text":"The beginning date of when to get events from. All returned events will happen ON or after the given date string that is given in mm/dd/yyyy format, ie: 01/19/2020","title":"start: DATE-STRING"},{"location":"llb/llb-api-spec/#end-date-string","text":"The latest date of when to get events from. All returned events will happen ON or before the given date string that is given in mm/dd/yyyy format, ie: 12/03/2009","title":"end: DATE-STRING"},{"location":"llb/llb-api-spec/#count-integer","text":"The maximum number of events to return. The route will return AT MOST count number of events.","title":"count: INTEGER"},{"location":"llb/llb-api-spec/#responses","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok","text":"The events were sent successfully. { \"events\" : [ { \"id\" : ID , \"title\" : STRING , \"spotsAvailable\" : INT , \"capacity\" : INT , \"thumbnail\" : URL , \"ticketCount\" : INT , \"canRegister\" : BOOLEAN , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } }, ... ], \"totalCount\" : INTEGER } ticketCount is the number of tickets the calling user has reserved for this event. It will be 0 if the user is not registered for the event. canRegister is dependent on the privilege level of the calling user. GPs are only able to register for events that are happening in the next 5 days.","title":"200 OK"},{"location":"llb/llb-api-spec/#get-apiv1protectedeventssigned_up","text":"Get all of the events happening in the future that the given user is signed up for.","title":"GET api/v1/protected/events/signed_up"},{"location":"llb/llb-api-spec/#query-params_1","text":"","title":"Query Params"},{"location":"llb/llb-api-spec/#start-date-string_1","text":"The beginning date of when to get events from. All returned events will happen ON or after the given date string that is given in mm/dd/yyyy format, ie: 01/19/2020","title":"start: DATE-STRING"},{"location":"llb/llb-api-spec/#end-date-string_1","text":"The latest date of when to get events from. All returned events will happen ON or before the given date string that is given in mm/dd/yyyy format, ie: 12/03/2009","title":"end: DATE-STRING"},{"location":"llb/llb-api-spec/#count-integer_1","text":"The maximum number of events to return. The route will return AT MOST count number of events.","title":"count: INTEGER"},{"location":"llb/llb-api-spec/#responses_1","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_1","text":"The events were sent successfully. { \"events\" : [ { \"id\" : ID , \"title\" : STRING , \"spotsAvailable\" : INT , \"capacity\" : INT , \"thumbnail\" : URL , \"ticketCount\" : INT , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } }, ... ], \"totalCount\" : INTEGER } ticketCount is the number of tickets the calling user has reserved for this event. It will be 0 if the user is not registered for the event.","title":"200 OK"},{"location":"llb/llb-api-spec/#get-apiv1protectedeventsids123","text":"Get the event bodies for the events with the ids that are specified in the query parameter.","title":"GET api/v1/protected/events?ids=1,2,3,..."},{"location":"llb/llb-api-spec/#query-params_2","text":"","title":"Query Params"},{"location":"llb/llb-api-spec/#ids-int-list","text":"The event ids that are being requested. Ids are numbers and they should be seperated by a single comma. If this query parameter is missing, this route returns an empty list. Ignore duplicated values. Ignore ids that do not correspond to any existing event.","title":"ids: INT-LIST"},{"location":"llb/llb-api-spec/#responses_2","text":"Equivelent to above routes: { \"events\" : [ { \"id\" : ID , \"title\" : STRING , \"spotsAvailable\" : INT , \"capacity\" : INT , \"thumbnail\" : URL , \"ticketCount\" : INT , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } }, ... ], \"totalCount\" : INTEGER }","title":"Responses"},{"location":"llb/llb-api-spec/#single-event","text":"","title":"Single Event"},{"location":"llb/llb-api-spec/#get-apiv1protectedeventsevent_id","text":"Gets a specific event with the specified id.","title":"GET api/v1/protected/events/:event_id"},{"location":"llb/llb-api-spec/#route-params","text":"","title":"Route Params"},{"location":"llb/llb-api-spec/#event_id-id","text":"The id number of the event that is being queried.","title":"event_id: ID"},{"location":"llb/llb-api-spec/#responses_3","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_2","text":"The event was retrieved successfully. { \"id\" : ID , \"title\" : STRING , \"spotsAvailable\" : INT , \"capacity\" : INT , \"thumbnail\" : URL , \"ticketCount\" : INT , \"canRegister\" : BOOLEAN , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } } ticketCount is the number of tickets the calling user has reserved for this event. It will be 0 if the user is not registered for the event. canRegister is dependent on the privilege level of the calling user. GPs are only able to register for events that are happening in the next 5 days. canRegister does not check if the calling user is already signed up for this event.","title":"200 OK"},{"location":"llb/llb-api-spec/#get-apiv1protectedeventsevent_idregistrations","text":"Gets a list of users registered for the event with the given id.","title":"GET api/v1/protected/events/:event_id/registrations"},{"location":"llb/llb-api-spec/#route-params_1","text":"","title":"Route Params"},{"location":"llb/llb-api-spec/#event_id-id_1","text":"The id number of the event that is being queried.","title":"event_id: ID"},{"location":"llb/llb-api-spec/#responses_4","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_3","text":"The event was retrieved successfully. { \"registrations\" : [ { \"firstName\" : STRING , \"lastName\" : STRING \"email\" : STRING , \"ticketCount\" : INT }, ... ] }","title":"200 OK"},{"location":"llb/llb-api-spec/#400-bad-request","text":"There does not exist an event with id: <id> If the provided event id does not exist","title":"400 BAD REQUEST"},{"location":"llb/llb-api-spec/#401-unauthorized","text":"The calling user does not have the required privilege level If the calling user is not an admin.","title":"401 Unauthorized"},{"location":"llb/llb-api-spec/#post-apiv1protectedevents","text":"Create a new event. This route must be called by an admin.","title":"POST api/v1/protected/events/"},{"location":"llb/llb-api-spec/#request-body","text":"{ \"title\" : STRING , \"spotsAvailable\" : INT , \"capacity\" : INT , \"thumbnail\" : URL , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } } There is an open question on how thumbnails should be handled.","title":"Request Body"},{"location":"llb/llb-api-spec/#responses_5","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_4","text":"The event was created successfully. Will return the event that was just created (including the generated id). { \"id\" : ID , \"title\" : STRING , \"spotsAvailable\" : INT , \"capacity\" : INT , \"thumbnail\" : URL , \"ticketCount\" : INT , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } }","title":"200 OK"},{"location":"llb/llb-api-spec/#401-unauthorized_1","text":"The calling user does not have the required privilege level If the calling user is not an admin.","title":"401 Unauthorized"},{"location":"llb/llb-api-spec/#put-apiv1protectedeventsevent_id","text":"Update an existing event. This route must be called by an admin. All fields are optional.","title":"PUT api/v1/protected/events/:event_id"},{"location":"llb/llb-api-spec/#request-body_1","text":"{ \"title\" : STRING , \"spotsAvailable\" : INT , \"thumbnail\" : URL , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } }","title":"Request Body"},{"location":"llb/llb-api-spec/#responses_6","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_5","text":"The event was updated successfully. Will return the event that was just created (including the generated id). { \"id\" : ID , \"title\" : STRING , \"spotsAvailable\" : INT , \"thumbnail\" : URL , \"ticketCount\" : INT , \"details\" : { \"description\" : STRING , \"location\" : STRING , \"start\" : TIMESTAMP , \"end\" : TIMESTAMP } }","title":"200 OK"},{"location":"llb/llb-api-spec/#401-unauthorized_2","text":"The calling user does not have the required privilege level If the calling user is not an admin.","title":"401 Unauthorized"},{"location":"llb/llb-api-spec/#409-conflict","text":"This response occurs when spotsAvailable is less than the number of users currently registered for the event.","title":"409 Conflict"},{"location":"llb/llb-api-spec/#delete-apiv1protectedeventsevent_id","text":"Delete an existing event. This route must be called by an admin.","title":"DELETE api/v1/protected/events/:event_id"},{"location":"llb/llb-api-spec/#responses_7","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_6","text":"The event was deleted successfully. Returns the ID of the deleted event. { \"id\" : ID }","title":"200 OK"},{"location":"llb/llb-api-spec/#401-unauthorized_3","text":"The calling user does not have the required privilege level If the calling user is not an admin.","title":"401 Unauthorized"},{"location":"llb/llb-api-spec/#account-creation-flow","text":"","title":"Account Creation Flow"},{"location":"llb/llb-api-spec/#post-apiv1protectedrequests","text":"Making a request to be upgraded from GP to PF. Must be made by a GP user. Potentially adding bottle nose to prevent multiple denied requests. Allow multiple outstanding requests?","title":"POST api/v1/protected/requests"},{"location":"llb/llb-api-spec/#responses_8","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_7","text":"","title":"200 OK"},{"location":"llb/llb-api-spec/#429-too-many-requests","text":"","title":"429 TOO MANY REQUESTS"},{"location":"llb/llb-api-spec/#get-apiv1protectedrequests","text":"Getting all active requests. Must be called by an admin.","title":"GET api/v1/protected/requests"},{"location":"llb/llb-api-spec/#responses_9","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_8","text":"{ \"requests\" : [ { \"id\" : \"request_id STRING\" , \"user\" : { \"id\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"email\" : STRING , \"phoneNumber\" : STRING } }, ... ] }","title":"200 OK"},{"location":"llb/llb-api-spec/#401-unauthorized_4","text":"The calling user does not have the required privilege level If the calling user is not an admin.","title":"401 Unauthorized"},{"location":"llb/llb-api-spec/#get-apiv1protectedrequestsrequest_id","text":"Gets all the information associated with the account that made this request.","title":"GET /api/v1/protected/requests/:request_id"},{"location":"llb/llb-api-spec/#params","text":"request_id is the id number of this request.","title":"Params"},{"location":"llb/llb-api-spec/#response","text":"","title":"Response"},{"location":"llb/llb-api-spec/#200-ok_9","text":"{ \"mainContact\" : { \"id\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, \"additionalContacts\" : [ { \"id\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"email\" : EMAIL , \"shouldSendEmails\" : BOOLEAN , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, ... ], \"children\" : [ { \"id\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"pronouns\" : STRING , \"school\" : STRING , \"schoolYear\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medications\" : STRING OR NULL , \"notes\" : STRING OR NULL , } ... ], \"location\" : { \"address\" : STRING , \"city\" : STRING , \"state\" : STRING , \"zipCode\" : STRING }, \"accountType\" : PRIVILEGE_LEVEL } PRIVILEGE_LEVEL is one of \"GP\", \"PF\", or \"ADMIN\". Note that this is included so that this response matches the response for getting all of a user's information even though it will always be GP in this case.","title":"200 OK"},{"location":"llb/llb-api-spec/#post-apiv1protectedrequestsrequest_idapprove","text":"","title":"POST api/v1/protected/requests/:request_id/approve"},{"location":"llb/llb-api-spec/#post-apiv1protectedrequestsrequest_idreject","text":"Approving or rejecting a request by a user to become a PF. Must be called by an admin.","title":"POST api/v1/protected/requests/:request_id/reject"},{"location":"llb/llb-api-spec/#path-params","text":"","title":"Path Params"},{"location":"llb/llb-api-spec/#requst_id","text":"The id of the request that is being modified.","title":"requst_id"},{"location":"llb/llb-api-spec/#responses_10","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_10","text":"","title":"200 OK"},{"location":"llb/llb-api-spec/#401-unauthorized_5","text":"The calling user does not have the required privilege level If the calling user is not an admin.","title":"401 Unauthorized"},{"location":"llb/llb-api-spec/#get-apiv1protectedrequestsstatus","text":"Getting the statuses of all requests the calling user has made to become a PF.","title":"GET api/v1/protected/requests/status"},{"location":"llb/llb-api-spec/#responses_11","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_11","text":"{ \"requests\" : [ { \"id\" : INT , \"status\" : \"APPROVED\" | \"REJECTED\" | \"PENDING\" , \"created\" : TIMESTAMP }, ... ] }","title":"200 OK"},{"location":"llb/llb-api-spec/#site-announcements","text":"NOTE: Site-wide and event specific announcements have uniquely identifying ID numbers.","title":"Site Announcements"},{"location":"llb/llb-api-spec/#get-apiv1protectedannouncements","text":"Gets a list of site-wide announcements. The announcements will be returned in chronological order, from newest to oldest.","title":"GET api/v1/protected/announcements"},{"location":"llb/llb-api-spec/#query-params_3","text":"","title":"Query Params"},{"location":"llb/llb-api-spec/#start-date-string_2","text":"The beginning date of when to get announcements from. All returned announcements are created ON or after the given date string that is given in mm/dd/yyyy format, e.g. 01/19/2020. Defaults to 3 weeks from end or the current date.","title":"start: DATE-STRING"},{"location":"llb/llb-api-spec/#end-date-string_2","text":"The end date of when to get announcements from. All returned announcements will happen ON or before the given date string that is given in mm/dd/yyyy format, e.g. 12/03/2009. Defaults to the current date.","title":"end: DATE-STRING"},{"location":"llb/llb-api-spec/#count-integer_2","text":"The maximum number of announcements to return. The route will return AT MOST count number of announcements. Defaults to 50 or all events that exist.","title":"count: INTEGER"},{"location":"llb/llb-api-spec/#responses_12","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_12","text":"The announcements were retrieved successfully. { \"announcements\" : [ { \"id\" : ID , \"title\" : STRING , \"description\" : STRING , \"created\" : TIMESTAMP }, ... ], \"totalCount\" : INTEGER }","title":"200 OK"},{"location":"llb/llb-api-spec/#get-apiv1protectedannouncementsevent_id","text":"Get any announcements that are specific to a particular event. Events can have multiple announcements associated with them. Announcements should be returned in order of how recent they were created.","title":"GET api/v1/protected/announcements/:event_id"},{"location":"llb/llb-api-spec/#path-params_1","text":"","title":"Path Params"},{"location":"llb/llb-api-spec/#event_id","text":"The ID of the event whose announcements are being queried","title":"event_id"},{"location":"llb/llb-api-spec/#responses_13","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_13","text":"The announcements were retrieved successfully. { \"announcements\" : [ { \"id\" : ID , \"title\" : STRING , \"description\" : STRING , \"created\" : TIMESTAMP , \"event_id\" : ID }, ... ], \"totalCount\" : INTEGER }","title":"200 OK"},{"location":"llb/llb-api-spec/#post-apiv1protectedannouncements","text":"Creates a new site-wide announcement. Can only be accessed by admins.","title":"POST api/v1/protected/announcements"},{"location":"llb/llb-api-spec/#request","text":"Body: { \"announcement\" : { \"title\" : STRING , \"description\" : STRING } }","title":"Request"},{"location":"llb/llb-api-spec/#responses_14","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_14","text":"The announcement was created successfully. { \"id\" : ID , \"title\" : STRING , \"description\" : STRING , \"created\" : TIMESTAMP }","title":"200 OK"},{"location":"llb/llb-api-spec/#401-unauthorized_6","text":"The calling user does not have the required privilege level If the calling user is not an admin.","title":"401 Unauthorized"},{"location":"llb/llb-api-spec/#post-apiv1protectedannouncementsevent_id","text":"Creates a new announcement for the given event. Can only be accessed by admins.","title":"POST api/v1/protected/announcements/:event_id"},{"location":"llb/llb-api-spec/#request_1","text":"Body: { \"title\" : STRING , \"description\" : STRING }","title":"Request"},{"location":"llb/llb-api-spec/#responses_15","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_15","text":"The announcement was created successfully. { \"id\" : ID , \"title\" : STRING , \"description\" : STRING , \"created\" : TIMESTAMP , \"event_id\" : ID }","title":"200 OK"},{"location":"llb/llb-api-spec/#401-unauthorized_7","text":"The calling user does not have the required privilege level If the calling user is not an admin.","title":"401 Unauthorized"},{"location":"llb/llb-api-spec/#delete-apiv1protectedannouncementsannouncement_id","text":"Deletes an announcment with the specified announcment id. This route can be used to delete site-wide or event specific because they have unique announcement identifiers. This route can only be called by an admin.","title":"DELETE /api/v1/protected/announcements/:announcement_id"},{"location":"llb/llb-api-spec/#path-params_2","text":"","title":"Path Params"},{"location":"llb/llb-api-spec/#announcment_id","text":"The ID of the announcement being deleted.","title":"announcment_id"},{"location":"llb/llb-api-spec/#requests","text":"","title":"Requests"},{"location":"llb/llb-api-spec/#200-ok_16","text":"The announcement was deleted successfully.","title":"200 OK"},{"location":"llb/llb-api-spec/#401-unauthorized_8","text":"The calling user does not have the required privilege level If the calling user is not an admin.","title":"401 Unauthorized"},{"location":"llb/llb-api-spec/#event-checkout-and-registration","text":"The events in a user's cart are stored in Vuex on the frontend in the cart module.","title":"Event Checkout and Registration"},{"location":"llb/llb-api-spec/#post-apiv1protectedcheckoutregister","text":"Accepts a non-empty list of events to register the user for and creates records in the USER_EVENTS table. If called by an ADMIN or a PF user, it skips anything to do with Stripe and payments. If called by a GP, the EVENT_REGISTRATIONS records are initially persisted as \"invalid\" with the CheckoutSessionID of the Stripe endpoint we create. When the checkout is successfully completed, the EVENT_REGISTRATIONS records have their statuses updated to \"active\". How does Stripe work? When a GP clicks register, we call this route, which will create a Stripe Checkout Session. The ID is returned to the frontend by this API. The ID is used to redirect the user to a page in Stripe's application, where they can pay. Upon a valid payment completion, Stripe triggers our webhook, and when it receives a 200 code Stripe will redirect to the success URL.","title":"POST api/v1/protected/checkout/register"},{"location":"llb/llb-api-spec/#request-body_2","text":"{ \"lineItems\" : [ { \"eventId\" : INT , \"quantity\" : INT }, ... ] }","title":"Request Body"},{"location":"llb/llb-api-spec/#responses_16","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_17","text":"The purchase was successful.","title":"200 OK"},{"location":"llb/llb-api-spec/#202-accepted","text":"Checkout session created, response contains the ID.","title":"202 ACCEPTED"},{"location":"llb/llb-api-spec/#400-bad-request_1","text":"The request syntax is malformed, e.g. the given list of events is empty.","title":"400 BAD REQUEST"},{"location":"llb/llb-api-spec/#401-unauthorized_9","text":"The user is not eligible to sign up for one or more of the requested events.","title":"401 UNAUTHORIZED"},{"location":"llb/llb-api-spec/#404-not-found","text":"One or more of the event IDs is invalid.","title":"404 NOT FOUND"},{"location":"llb/llb-api-spec/#409-conflict_1","text":"The user has requested a number of tickets that exceeds the capacity for one or more of the requested events.","title":"409 CONFLICT"},{"location":"llb/llb-api-spec/#put-apiv1protectedcheckoutregisterevent_id","text":"Changes the number of tickets a user has for the specified event. If the user is a GP and the new number of tickets is greater than the number of tickets the user previously had, a Stripe checkout session will be created. The new number of tickets must be within the event's capacity and must be greater than or equal to 0. If a GP user decreases the number of tickets, the price of the removed tickets will be added to their account balance.","title":"PUT api/v1/protected/checkout/register/:event_id"},{"location":"llb/llb-api-spec/#request-body_3","text":"{ \"quantity\" : INT }","title":"Request Body"},{"location":"llb/llb-api-spec/#responses_17","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_18","text":"The change in tickets was successful.","title":"200 OK"},{"location":"llb/llb-api-spec/#202-accepted_1","text":"Checkout session created, response contains the ID.","title":"202 ACCEPTED"},{"location":"llb/llb-api-spec/#401-unauthorized_10","text":"The user is not eligible to sign up for the event.","title":"401 UNAUTHORIZED"},{"location":"llb/llb-api-spec/#404-not-found_1","text":"The event ID is invalid.","title":"404 NOT FOUND"},{"location":"llb/llb-api-spec/#409-conflict_2","text":"The user has requested a number of tickets that exceeds the capacity for the event.","title":"409 CONFLICT"},{"location":"llb/llb-api-spec/#post-apiv1webhooksstripe","text":"A webhook for Stripe to send events to. See Step 4 of these docs: https://stripe.com/docs/payments/checkout/one-time Stripe Webhook Documentation: https://stripe.com/docs/webhooks","title":"POST api/v1/webhooks/stripe"},{"location":"llb/llb-api-spec/#request-body_4","text":"The body we care about is a Session object as defined by the Stripe Java library. We use only the Checkout Session ID, marking USER_EVENTS records that are invalid with the same Checkout Session ID as valid.","title":"Request Body"},{"location":"llb/llb-api-spec/#responses_18","text":"","title":"Responses"},{"location":"llb/llb-api-spec/#200-ok_19","text":"Generally, a lot of problems are caused when we don't return a 200 code. It's the equivalent of Stripe saying \"OK, we authorized this payment!\" and us saying \"Wait, something's wrong, don't charge them\". Idk what the actual implementation details are, but generally, Stripe will send more types of events to our hook than just the checkout.session.completed event that we care about. For other events, we just return 200.","title":"200 OK"},{"location":"llb/llb-api-spec/#400-bad-request_2","text":"This shouldn't happen...","title":"400 BAD REQUEST"},{"location":"llb/llb-api-spec/#401-unauthorized_11","text":"We're using webhook signatures to authorize this endpoint.","title":"401 UNAUTHORIZED"},{"location":"llb/llb-auth-api/","text":"Login and Token Endpoints Common Headers: For any request with a body it is assumed that this header exists: Content-Type: application/json Access Token Composition: { \"userId\" : INT , \"adminLevel\" : INT } adminLevel: integer describing the user's privilege level. 0: General Public (GP) 1: Participating Family (PF) 2: Admin Note: For any protected route, if the access token included in the request header is expired the backend will return a 401 with the following text indicating that a refresh is necessary. \"Given access token is expired or invalid\" Unprotected Routes These routes are called by a user that is not yet authenticated. **These routes all have the prefix api/v1/ POST user/login Used for logging in. Request Body: { \"email\" : EMAIL , \"password\" : STRING } An EMAIL is a string representing a user's email. Responses 201 Created The username/password combination is valid. Includes distinct access and refresh tokens for the given user. Body: { \"accessToken\" : JWT , \"refreshToken\" : JWT } 400 Bad Request Malformed request. 401 Unauthorized The username/password combination is invalid. POST user/login/refresh Used for getting a new access token. Request Headers: X-Refresh-Token : JWT Responses 201 Created The refresh token is valid and has not yet expired. Response includes a new unique access_token. Body: { \"accessToken\" : JWT , } 401 Unauthorized The refresh token is invalid. DELETE user/login Used for logging out. Request Headers: X-Access-Token : JWT X-Refresh-Token : JWT Responses 204 No Content Logout successful. POST user/signup Used for signing up a new user. Users will be given the access level of a GP from this route. Users signing up as PF should follow this call with a call to /protected/users/signup/pf to sumbit a request to be upgraded to a PF. Request Body { \"email\" : EMAIL , \"password\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"phoneNumber\" : STRING , \"location\" : { \"address\" : STRING , \"city\" : STRING , \"state\" : STRING , \"zipCode\" : STRING } } EMAIL: Is a valid email string. PASSWORD: Is a valid password string that is at least 8 characters. Responses 201 Created The email is still available, and an account has been successfully created. Body: { \"accessToken\" : JWT , \"refreshToken\" : JWT } 400 Bad Request Malformed request body. 409 Conflict The given email is already in use. \"Error creating new user, given email %s already used\" GET user/verify/:secret_key Used for confirming an account email Request Path Params secret_key: is a secret key randomly generated by the backend and sent to the user by email. Responses 200 OK The user's secret key has been verified. 401 Unauthorized The secret key is invalid or expired. TODO: GET user/create_secret/:user_id Used for creating secret keys for users. Request PATH: GET user/create_secret/:user_id Responses 200 OK A secret key was created and stored for the given user. 400 BAD REQUEST The given user id could not be found. Protected Routes These routes are called by an authenticated user. These routes can only be called with a valid access JWT token specified in the following header. X-Access-Token: JWT-String **These routes all have the prefix api/v1/protected/ DELETE /user Deletes the user that called this route as determined by their access JWT. This route is only implemented to support testing and does not invalidate user access tokens. This is not safe to be called by the frontend client for this reason. Responses 200 OK The user no longer exists POST /user/change_password Allows a user to change their password when already authenticated. Request { \"currentPassword\" : STRING , \"newPassword\" : STRING } passwords should be strings with length >= 8 characters. Responses 200 OK The password change was successful. 400 BAD REQUEST If the request was malformed. 401 Unauthorized The currentPassword does not match the calling user's current password. POST /user/change_email Allows a user to change the email address for the main contact. This updates the email the user logs in with as well as the email for the main contact that will recieve all communication. Request { \"newEmail\" : STRING , \"password\" : STRING } Responses 200 OK The email change was successful. 400 BAD REQUEST If the request was malformed. 401 Unauthorized The currentPassword does not match the calling user's current password. POST user/contact_info Used for setting famil data as a participating family. It is expected that a user has already sent a request to the regular sign up and exists. This route does NOT automatically create a PF request. That should be done with a call to POST /protected/requests . Request Body: { \"mainContact\" : { \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, \"additionalContacts\" : [ { \"firstName\" : STRING , \"lastName\" : STRING , \"email\" : EMAIL , \"shouldSendEmails\" : BOOLEAN , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, ... ], \"children\" : [ { \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"pronouns\" : STRING , \"school\" : STRING , \"schoolYear\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medications\" : STRING OR NULL , \"notes\" : STRING OR NULL , } ... ], } An EMAIL is a string representing a user's email. Responses 200 OK The information was successfuly stored and a request was made to the admins to become a pf. 400 Bad Request Malformed request. GET /user/contact_info Gets all the information associated with this user's account. Response 200 OK { \"location\" : { \"address\" : STRING , \"city\" : STRING , \"state\" : STRING , \"zipCode\" : STRING }, \"mainContact\" : { \"id\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, \"additionalContacts\" : [ { \"id\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"email\" : EMAIL , \"shouldSendEmails\" : BOOLEAN , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, ... ], \"children\" : [ { \"id\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"pronouns\" : STRING , \"school\" : STRING , \"schoolYear\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medications\" : STRING OR NULL , \"notes\" : STRING OR NULL , } ... ] } PUT /user/contact_info Updates the user's contact, children, and account infromation. Request { \"location\" : { \"address\" : STRING , \"city\" : STRING , \"state\" : STRING , \"zipCode\" : STRING }, \"mainContact\" : { \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, \"additionalContacts\" : [ { \"id\" : STRING OR NULL , \"firstName\" : STRING , \"lastName\" : STRING , \"email\" : EMAIL , \"shouldSendEmails\" : BOOLEAN , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, ... ], \"children\" : [ { \"id\" : STRING OR NULL , \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"pronouns\" : STRING , \"school\" : STRING , \"schoolYear\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medications\" : STRING OR NULL , \"notes\" : STRING OR NULL , } ... ] } Any contacts or children that exist in the database and not in the request body will be deleted. Any contact or child with a null id will be treated as a brand new record. Any contact or child with a NON-null id will be treated as an update and will return a 400 if the row with that id is not owned by the calling user. Responses 200 OK Everything went ok. 400 BAD REQUEST Either the JSON request body was malformed or a child or contact had a non-null id that is associated with a row in the db that is NOT associated with the user that called this route.","title":"Login and Token Endpoints"},{"location":"llb/llb-auth-api/#login-and-token-endpoints","text":"","title":"Login and Token Endpoints"},{"location":"llb/llb-auth-api/#common-headers","text":"For any request with a body it is assumed that this header exists: Content-Type: application/json","title":"Common Headers:"},{"location":"llb/llb-auth-api/#access-token-composition","text":"{ \"userId\" : INT , \"adminLevel\" : INT } adminLevel: integer describing the user's privilege level. 0: General Public (GP) 1: Participating Family (PF) 2: Admin","title":"Access Token Composition:"},{"location":"llb/llb-auth-api/#note","text":"For any protected route, if the access token included in the request header is expired the backend will return a 401 with the following text indicating that a refresh is necessary. \"Given access token is expired or invalid\"","title":"Note:"},{"location":"llb/llb-auth-api/#unprotected-routes","text":"These routes are called by a user that is not yet authenticated. **These routes all have the prefix api/v1/","title":"Unprotected Routes"},{"location":"llb/llb-auth-api/#post-userlogin","text":"Used for logging in.","title":"POST user/login"},{"location":"llb/llb-auth-api/#request","text":"Body: { \"email\" : EMAIL , \"password\" : STRING } An EMAIL is a string representing a user's email.","title":"Request"},{"location":"llb/llb-auth-api/#responses","text":"","title":"Responses"},{"location":"llb/llb-auth-api/#201-created","text":"The username/password combination is valid. Includes distinct access and refresh tokens for the given user. Body: { \"accessToken\" : JWT , \"refreshToken\" : JWT }","title":"201 Created"},{"location":"llb/llb-auth-api/#400-bad-request","text":"Malformed request.","title":"400 Bad Request"},{"location":"llb/llb-auth-api/#401-unauthorized","text":"The username/password combination is invalid.","title":"401 Unauthorized"},{"location":"llb/llb-auth-api/#post-userloginrefresh","text":"Used for getting a new access token.","title":"POST user/login/refresh"},{"location":"llb/llb-auth-api/#request_1","text":"","title":"Request"},{"location":"llb/llb-auth-api/#headers","text":"X-Refresh-Token : JWT","title":"Headers:"},{"location":"llb/llb-auth-api/#responses_1","text":"","title":"Responses"},{"location":"llb/llb-auth-api/#201-created_1","text":"The refresh token is valid and has not yet expired. Response includes a new unique access_token. Body: { \"accessToken\" : JWT , }","title":"201 Created"},{"location":"llb/llb-auth-api/#401-unauthorized_1","text":"The refresh token is invalid.","title":"401 Unauthorized"},{"location":"llb/llb-auth-api/#delete-userlogin","text":"Used for logging out.","title":"DELETE user/login"},{"location":"llb/llb-auth-api/#request_2","text":"Headers: X-Access-Token : JWT X-Refresh-Token : JWT","title":"Request"},{"location":"llb/llb-auth-api/#responses_2","text":"","title":"Responses"},{"location":"llb/llb-auth-api/#204-no-content","text":"Logout successful.","title":"204 No Content"},{"location":"llb/llb-auth-api/#post-usersignup","text":"Used for signing up a new user. Users will be given the access level of a GP from this route. Users signing up as PF should follow this call with a call to /protected/users/signup/pf to sumbit a request to be upgraded to a PF.","title":"POST user/signup"},{"location":"llb/llb-auth-api/#request_3","text":"","title":"Request"},{"location":"llb/llb-auth-api/#body","text":"{ \"email\" : EMAIL , \"password\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"phoneNumber\" : STRING , \"location\" : { \"address\" : STRING , \"city\" : STRING , \"state\" : STRING , \"zipCode\" : STRING } } EMAIL: Is a valid email string. PASSWORD: Is a valid password string that is at least 8 characters.","title":"Body"},{"location":"llb/llb-auth-api/#responses_3","text":"","title":"Responses"},{"location":"llb/llb-auth-api/#201-created_2","text":"The email is still available, and an account has been successfully created. Body: { \"accessToken\" : JWT , \"refreshToken\" : JWT }","title":"201 Created"},{"location":"llb/llb-auth-api/#400-bad-request_1","text":"Malformed request body.","title":"400 Bad Request"},{"location":"llb/llb-auth-api/#409-conflict","text":"The given email is already in use. \"Error creating new user, given email %s already used\"","title":"409 Conflict"},{"location":"llb/llb-auth-api/#get-userverifysecret_key","text":"Used for confirming an account email","title":"GET user/verify/:secret_key"},{"location":"llb/llb-auth-api/#request_4","text":"","title":"Request"},{"location":"llb/llb-auth-api/#path-params","text":"secret_key: is a secret key randomly generated by the backend and sent to the user by email.","title":"Path Params"},{"location":"llb/llb-auth-api/#responses_4","text":"","title":"Responses"},{"location":"llb/llb-auth-api/#200-ok","text":"The user's secret key has been verified.","title":"200 OK"},{"location":"llb/llb-auth-api/#401-unauthorized_2","text":"The secret key is invalid or expired.","title":"401 Unauthorized"},{"location":"llb/llb-auth-api/#todo-get-usercreate_secretuser_id","text":"Used for creating secret keys for users.","title":"TODO: GET user/create_secret/:user_id"},{"location":"llb/llb-auth-api/#request_5","text":"PATH: GET user/create_secret/:user_id","title":"Request"},{"location":"llb/llb-auth-api/#responses_5","text":"","title":"Responses"},{"location":"llb/llb-auth-api/#200-ok_1","text":"A secret key was created and stored for the given user.","title":"200 OK"},{"location":"llb/llb-auth-api/#400-bad-request_2","text":"The given user id could not be found.","title":"400 BAD REQUEST"},{"location":"llb/llb-auth-api/#protected-routes","text":"These routes are called by an authenticated user. These routes can only be called with a valid access JWT token specified in the following header. X-Access-Token: JWT-String **These routes all have the prefix api/v1/protected/","title":"Protected Routes"},{"location":"llb/llb-auth-api/#delete-user","text":"Deletes the user that called this route as determined by their access JWT. This route is only implemented to support testing and does not invalidate user access tokens. This is not safe to be called by the frontend client for this reason.","title":"DELETE /user"},{"location":"llb/llb-auth-api/#responses_6","text":"","title":"Responses"},{"location":"llb/llb-auth-api/#200-ok_2","text":"The user no longer exists","title":"200 OK"},{"location":"llb/llb-auth-api/#post-userchange_password","text":"Allows a user to change their password when already authenticated.","title":"POST /user/change_password"},{"location":"llb/llb-auth-api/#request_6","text":"{ \"currentPassword\" : STRING , \"newPassword\" : STRING } passwords should be strings with length >= 8 characters.","title":"Request"},{"location":"llb/llb-auth-api/#responses_7","text":"","title":"Responses"},{"location":"llb/llb-auth-api/#200-ok_3","text":"The password change was successful.","title":"200 OK"},{"location":"llb/llb-auth-api/#400-bad-request_3","text":"If the request was malformed.","title":"400 BAD REQUEST"},{"location":"llb/llb-auth-api/#401-unauthorized_3","text":"The currentPassword does not match the calling user's current password.","title":"401 Unauthorized"},{"location":"llb/llb-auth-api/#post-userchange_email","text":"Allows a user to change the email address for the main contact. This updates the email the user logs in with as well as the email for the main contact that will recieve all communication.","title":"POST /user/change_email"},{"location":"llb/llb-auth-api/#request_7","text":"{ \"newEmail\" : STRING , \"password\" : STRING }","title":"Request"},{"location":"llb/llb-auth-api/#responses_8","text":"","title":"Responses"},{"location":"llb/llb-auth-api/#200-ok_4","text":"The email change was successful.","title":"200 OK"},{"location":"llb/llb-auth-api/#400-bad-request_4","text":"If the request was malformed.","title":"400 BAD REQUEST"},{"location":"llb/llb-auth-api/#401-unauthorized_4","text":"The currentPassword does not match the calling user's current password.","title":"401 Unauthorized"},{"location":"llb/llb-auth-api/#post-usercontact_info","text":"Used for setting famil data as a participating family. It is expected that a user has already sent a request to the regular sign up and exists. This route does NOT automatically create a PF request. That should be done with a call to POST /protected/requests .","title":"POST user/contact_info"},{"location":"llb/llb-auth-api/#request_8","text":"Body: { \"mainContact\" : { \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, \"additionalContacts\" : [ { \"firstName\" : STRING , \"lastName\" : STRING , \"email\" : EMAIL , \"shouldSendEmails\" : BOOLEAN , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, ... ], \"children\" : [ { \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"pronouns\" : STRING , \"school\" : STRING , \"schoolYear\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medications\" : STRING OR NULL , \"notes\" : STRING OR NULL , } ... ], } An EMAIL is a string representing a user's email.","title":"Request"},{"location":"llb/llb-auth-api/#responses_9","text":"","title":"Responses"},{"location":"llb/llb-auth-api/#200-ok_5","text":"The information was successfuly stored and a request was made to the admins to become a pf.","title":"200 OK"},{"location":"llb/llb-auth-api/#400-bad-request_5","text":"Malformed request.","title":"400 Bad Request"},{"location":"llb/llb-auth-api/#get-usercontact_info","text":"Gets all the information associated with this user's account.","title":"GET /user/contact_info"},{"location":"llb/llb-auth-api/#response","text":"","title":"Response"},{"location":"llb/llb-auth-api/#200-ok_6","text":"{ \"location\" : { \"address\" : STRING , \"city\" : STRING , \"state\" : STRING , \"zipCode\" : STRING }, \"mainContact\" : { \"id\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, \"additionalContacts\" : [ { \"id\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"email\" : EMAIL , \"shouldSendEmails\" : BOOLEAN , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, ... ], \"children\" : [ { \"id\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"pronouns\" : STRING , \"school\" : STRING , \"schoolYear\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medications\" : STRING OR NULL , \"notes\" : STRING OR NULL , } ... ] }","title":"200 OK"},{"location":"llb/llb-auth-api/#put-usercontact_info","text":"Updates the user's contact, children, and account infromation.","title":"PUT /user/contact_info"},{"location":"llb/llb-auth-api/#request_9","text":"{ \"location\" : { \"address\" : STRING , \"city\" : STRING , \"state\" : STRING , \"zipCode\" : STRING }, \"mainContact\" : { \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, \"additionalContacts\" : [ { \"id\" : STRING OR NULL , \"firstName\" : STRING , \"lastName\" : STRING , \"email\" : EMAIL , \"shouldSendEmails\" : BOOLEAN , \"dateOfBirth\" : TIMESTAMP , \"phoneNumber\" : STRING , \"pronouns\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medication\" : STRING OR NULL , \"notes\" : STRING OR NULL , }, ... ], \"children\" : [ { \"id\" : STRING OR NULL , \"firstName\" : STRING , \"lastName\" : STRING , \"dateOfBirth\" : TIMESTAMP , \"pronouns\" : STRING , \"school\" : STRING , \"schoolYear\" : STRING , \"allergies\" : STRING OR NULL , \"diagnosis\" : STRING OR NULL , \"medications\" : STRING OR NULL , \"notes\" : STRING OR NULL , } ... ] } Any contacts or children that exist in the database and not in the request body will be deleted. Any contact or child with a null id will be treated as a brand new record. Any contact or child with a NON-null id will be treated as an update and will return a 400 if the row with that id is not owned by the calling user.","title":"Request"},{"location":"llb/llb-auth-api/#responses_10","text":"","title":"Responses"},{"location":"llb/llb-auth-api/#200-ok_7","text":"Everything went ok.","title":"200 OK"},{"location":"llb/llb-auth-api/#400-bad-request_6","text":"Either the JSON request body was malformed or a child or contact had a non-null id that is associated with a row in the db that is NOT associated with the user that called this route.","title":"400 BAD REQUEST"},{"location":"sftt/","text":"Speak for the Trees API Spec Auth API","title":"Home"},{"location":"sftt/#speak-for-the-trees","text":"API Spec Auth API","title":"Speak for the Trees"},{"location":"sftt/sftt-api-spec/","text":"SFTT API Specification In every request header is a JWT. The JWT will contain the user's id value and the user's privilege level. Privilege Levels 0 = untrusted user 1 = a regular user 2 = an admin user It is assumed that the user making the request (as specified in the JWT header) is the person the block is being reserved / completed by. Block Status Updates POST api/v1/protected/blocks/reserve Open -> Reserved Must be called on open blocks. Update DB, add blocks to a user's assigned blocks Call map API and update status of blocks to reserved POST api/v1/protected/blocks/finish Reserved -> Done Whoever had the block in it's current reserve is the one who is credited with completion. Must be called by an admin or by the person holding the block. POST api/v1/protected/blocks/release Reserved -> Open Must be called by an admin or by the person holding the block. POST api/v1/protected/blocks/reset Done -> Open Admin Only reserve, finish, release, and reset share the same request bodies and possible responses. Request Body { \"blocks\" : [ \"block_id STRING\" , ... ] } The block id will correspond to the fid of a block stored in the ArcGIS map. Responses Partial successes are possible. Reasons a block may fail: - The block was not in the state that it should've been - The user is not allowed to modify that block's state - The fid doesn't match any block 200 OK { \"successes\" : [ \"block_id STRING\" , ... ], \"failures\" : [ \"block_id STRING\" , ... ] } 401 Unauthorized The calling user was not an admin (reset only) POST api/v1/protected/blocks/reserve/admin Open -> Reserved Admin Only Can specify a specific user that a block is being assigned to. Request Body { \"assigned_to\" : \"user_id STRING\" , \"blocks\" : [ \"block_id STRING\" , ... ] } Responses 200 OK { \"successes\" : [ \"block_id STRING\" , ... ], \"failures\" : [ \"block_id STRING\" , ... ] } 400 BAD REQUEST The body was malformed or the specified user doesn't exist. 401 Unauthorized The calling user was not an admin. Team Management Members of a team have roles specified in the following table: Role Name teamRole NONE 0 MEMBER 1 LEADER 2 PENDING 3 POST /teams Create a team. The team will only contain the member that created it who is now specified as the team leader. Request { \"name\" : STRING , \"bio\" : STRING , \"goal\" : INT \"goalCompletionDate\" : DATE , \"inviteEmails\" : [ STRING , ... ] } Goal is a number of blocks the team would like to complete by the goalCompleteDate. inviteEmails are a list of emails that that should be sent an invitation email to join the team. The team leader's email should not be included. This acts functionally the same as the /teams/:team_id/invite route. Response 200 OK { \"id\" : INT , \"name\" : STRING , \"bio\" : STRING , \"goal\" INT , \"goalCompleteDate\" : DATE , \"blocksCompleted\" : INT , \"blocksReserved\" : INT , \"applicantsToReview\" : BOOLEAN , \"members\" : [ { \"id\" : INT , \"username\" : STRING , \"blocksCompleted\" : INT , \"blocksReserved\" : INT , \"teamRole\" : INT }, ... ], } This is the same as the JSON returned for GET /teams/:team_id POST /teams/:team_id/invite Invite someone to join a team. Will send an email to all specified people that includes a link. Link will direct them to the team page where they can join once they are authenticated. Request { \"invites\" : [ { \"name\" : STRING , \"email\" STRING }, ... ] } POST /teams/:team_id/apply Apply to join this team. Any member can apply to join a team that they are not currently on. They will have to be approved by the team leader before becoming an actual member of the team. Request No request body. GET /teams/:team_id/applicants Team Leader only. Get the info for anyone that has requested to join this team in a list. Responses 200 OK { \"applicants\" : [ { \"userId\" : INT , \"username\" : STRING , }, ... ] } POST /teams/:team_id/applicants/:user_id/approve Team Leader only. Approve this applicant's request to join the team. The user_id will be the same as the id returned in the GET applicants API call. Request No Request body Responses 200 OK This member has joined the team. 400 BAD REQUEST If the team or request specified in the id is invalid OR the user that had created the request no longer exists. POST /teams/:team_id/applicants/:user_id/reject Team Leader only. Reject this applicant's request to join the team. The user_id will be the same as the id returned in the GET applicants API call. Request No Request body Responses 200 OK This applicant has been removed from the applicant's list. 400 BAD REQUEST If the team or request specified in the id is invalid OR the user that had created the request no longer exists. POST /teams/:team_id/leave Leave this team that you are a part of. Cannot be called by the leader of the team. Request No request body. POST /teams/:team_id/disband Disband this team. Leader only. The team will be removed from the public team list and all other members will now be free to join or create a different team. Request No request body. POST /teams/:team_id/members/:member_id/kick Kicks a member off this team. Leader only. That member is then allowed to join or create any team now. Request No request body. POST /teams/:team_id/transfer_ownership Update the team leader. Can only be called by the current leader of the given team. Request { \"newLeaderId\" : INT } Responses 200 OK Success. 400 Bad Request If the given user ID does not exist, or if the given user is not on the team. 401 Unauthorized If the requesting user is not the team leader. Team and Leaderboard Data GET /teams Gets a list of teams, names, member count. Responses 200 OK { \"teams\" : [ { \"id\" : INT , \"name\" : STRING , \"memberCount\" : INT , \"userTeamRole\" : TEAM_ROLE }, ... ], \"rowCount\" : INT } GET /teams/admin Gets a list of teams with their goal data. Responses 200 OK { \"teams\" : [ { \"id\" : INT , \"name\" : STRING , \"goalCompletionDate\" : TIMESTAMP , \"blocksCompleted\" : INT , \"blocksReserved\" : INT , \"goal\" : INT }, ... ], \"rowCount\" : INT } GET /teams/:team_id Gets the information for this specific team. Including the members with how many blocks each one has completed and reserved. Responses 200 OK { \"id\" : INT , \"name\" : STRING , \"bio\" : STRING , \"goal\" INT , \"goalCompleteDate\" : DATE , \"blocksCompleted\" : INT , \"blocksReserved\" : INT , \"userTeamRole\" : TEAM_ROLE , \"applicantsToReview\" : BOOLEAN , \"members\" : [ { \"id\" : INT , \"username\" : STRING , \"blocksCompleted\" : INT , \"blocksReserved\" : INT , \"teamRole\" : INT }, ... ], } The members list is sorted in descending order of number of blocks completed. teamRole is an indicator of the member's role on the team. Currently there are only two roles: general member and team leader. applicantsToReview is a flag that there are people that have applied to the team that the team leader has to review. This will always be false if a non-leader calls this route. GET /api/v1/protected/teams/export Export Teams and User information. This is an admin-only route. Returns a text/cvs response that includes every team name, the goal and goal completion date of the team, the time the team was created, every member of each team, the team role of each member, the number of blocks reserved and completed by each user on a team. Responses 200 OK STRING,STRING,STRING,... STRING,STRING,STRING,... ... GET /blocks Gets blocks done, in progress, todo for all of Boston Responses 200 OK { \"blocksCompleted\" : INT , \"blocksReserved\" : INT , \"blocksOpen\" : INT } GET /blocks/leaderboard Gets blocks completed leaderboard for both teams and individuals. Will include up-to the top 10 teams and the top 10 individuals Responses 200 OK { \"teams\" : [ { \"id\" : INT , \"name\" : STRING , \"blocksCompleted\" : INT , \"blocksReserved\" : INT }, ... ], \"individuals\" : [ { \"id\" : INT , \"username\" : STRING , \"blocksCompleted\" : INT , \"blocksReserved\" : INT }, ... ] } GET api/v1/protected/blocks/reserved Gets all blocks that are assigned_to the current user that have a status of RESERVED . Including the optional query parameter done=true will also return all blocks that have a status of DONE . Returns a list of block.fid . Responses 200 OK [ STRING , STRING , ... ] GET api/v1/protected/blocks/reserved/admin Gets all blocks that have a status of RESERVED , in descending order of reservation date. Can only be called by admins. Responses 200 OK { \"blocks\" : [ { \"fid\" : STRING , \"username\" : STRING , \"dateUpdated\" : TIMESTAMP } ], ... } GET api/v1/protected/blocks/done/admin Gets all blocks that have a status of DONE , in descending order of completion date. Can only be called by admins. Responses 200 OK { \"blocks\" : [ { \"fid\" : STRING , \"username\" : STRING , \"dateUpdated\" : TIMESTAMP } ], ... } GET /api/v1/protected/blocks/export Export Block and User/Team information. This is an admin-only route. Returns a text/csv response that includes every block number, the status of the block, the user that is associated with it (first name, last name, email, username), the time it last updated, and the names of the teams the user is currently on. Responses 200 OK STRING,STRING,STRING,... STRING,STRING,STRING,... ...","title":"SFTT API Specification"},{"location":"sftt/sftt-api-spec/#sftt-api-specification","text":"In every request header is a JWT. The JWT will contain the user's id value and the user's privilege level.","title":"SFTT API Specification"},{"location":"sftt/sftt-api-spec/#privilege-levels","text":"0 = untrusted user 1 = a regular user 2 = an admin user It is assumed that the user making the request (as specified in the JWT header) is the person the block is being reserved / completed by.","title":"Privilege Levels"},{"location":"sftt/sftt-api-spec/#block-status-updates","text":"","title":"Block Status Updates"},{"location":"sftt/sftt-api-spec/#post-apiv1protectedblocksreserve","text":"Open -> Reserved Must be called on open blocks. Update DB, add blocks to a user's assigned blocks Call map API and update status of blocks to reserved","title":"POST api/v1/protected/blocks/reserve"},{"location":"sftt/sftt-api-spec/#post-apiv1protectedblocksfinish","text":"Reserved -> Done Whoever had the block in it's current reserve is the one who is credited with completion. Must be called by an admin or by the person holding the block.","title":"POST api/v1/protected/blocks/finish"},{"location":"sftt/sftt-api-spec/#post-apiv1protectedblocksrelease","text":"Reserved -> Open Must be called by an admin or by the person holding the block.","title":"POST api/v1/protected/blocks/release"},{"location":"sftt/sftt-api-spec/#post-apiv1protectedblocksreset","text":"Done -> Open Admin Only","title":"POST api/v1/protected/blocks/reset"},{"location":"sftt/sftt-api-spec/#reserve-finish-release-and-reset-share-the-same-request-bodies-and-possible-responses","text":"","title":"reserve, finish, release, and reset share the same request bodies and possible responses."},{"location":"sftt/sftt-api-spec/#request-body","text":"{ \"blocks\" : [ \"block_id STRING\" , ... ] } The block id will correspond to the fid of a block stored in the ArcGIS map.","title":"Request Body"},{"location":"sftt/sftt-api-spec/#responses","text":"Partial successes are possible. Reasons a block may fail: - The block was not in the state that it should've been - The user is not allowed to modify that block's state - The fid doesn't match any block","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok","text":"{ \"successes\" : [ \"block_id STRING\" , ... ], \"failures\" : [ \"block_id STRING\" , ... ] }","title":"200 OK"},{"location":"sftt/sftt-api-spec/#401-unauthorized","text":"The calling user was not an admin (reset only)","title":"401 Unauthorized"},{"location":"sftt/sftt-api-spec/#post-apiv1protectedblocksreserveadmin","text":"Open -> Reserved Admin Only Can specify a specific user that a block is being assigned to.","title":"POST api/v1/protected/blocks/reserve/admin"},{"location":"sftt/sftt-api-spec/#request-body_1","text":"{ \"assigned_to\" : \"user_id STRING\" , \"blocks\" : [ \"block_id STRING\" , ... ] }","title":"Request Body"},{"location":"sftt/sftt-api-spec/#responses_1","text":"","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok_1","text":"{ \"successes\" : [ \"block_id STRING\" , ... ], \"failures\" : [ \"block_id STRING\" , ... ] }","title":"200 OK"},{"location":"sftt/sftt-api-spec/#400-bad-request","text":"The body was malformed or the specified user doesn't exist.","title":"400 BAD REQUEST"},{"location":"sftt/sftt-api-spec/#401-unauthorized_1","text":"The calling user was not an admin.","title":"401 Unauthorized"},{"location":"sftt/sftt-api-spec/#team-management","text":"Members of a team have roles specified in the following table: Role Name teamRole NONE 0 MEMBER 1 LEADER 2 PENDING 3","title":"Team Management"},{"location":"sftt/sftt-api-spec/#post-teams","text":"Create a team. The team will only contain the member that created it who is now specified as the team leader.","title":"POST /teams"},{"location":"sftt/sftt-api-spec/#request","text":"{ \"name\" : STRING , \"bio\" : STRING , \"goal\" : INT \"goalCompletionDate\" : DATE , \"inviteEmails\" : [ STRING , ... ] } Goal is a number of blocks the team would like to complete by the goalCompleteDate. inviteEmails are a list of emails that that should be sent an invitation email to join the team. The team leader's email should not be included. This acts functionally the same as the /teams/:team_id/invite route.","title":"Request"},{"location":"sftt/sftt-api-spec/#response","text":"","title":"Response"},{"location":"sftt/sftt-api-spec/#200-ok_2","text":"{ \"id\" : INT , \"name\" : STRING , \"bio\" : STRING , \"goal\" INT , \"goalCompleteDate\" : DATE , \"blocksCompleted\" : INT , \"blocksReserved\" : INT , \"applicantsToReview\" : BOOLEAN , \"members\" : [ { \"id\" : INT , \"username\" : STRING , \"blocksCompleted\" : INT , \"blocksReserved\" : INT , \"teamRole\" : INT }, ... ], } This is the same as the JSON returned for GET /teams/:team_id","title":"200 OK"},{"location":"sftt/sftt-api-spec/#post-teamsteam_idinvite","text":"Invite someone to join a team. Will send an email to all specified people that includes a link. Link will direct them to the team page where they can join once they are authenticated.","title":"POST /teams/:team_id/invite"},{"location":"sftt/sftt-api-spec/#request_1","text":"{ \"invites\" : [ { \"name\" : STRING , \"email\" STRING }, ... ] }","title":"Request"},{"location":"sftt/sftt-api-spec/#post-teamsteam_idapply","text":"Apply to join this team. Any member can apply to join a team that they are not currently on. They will have to be approved by the team leader before becoming an actual member of the team.","title":"POST /teams/:team_id/apply"},{"location":"sftt/sftt-api-spec/#request_2","text":"No request body.","title":"Request"},{"location":"sftt/sftt-api-spec/#get-teamsteam_idapplicants","text":"Team Leader only. Get the info for anyone that has requested to join this team in a list.","title":"GET /teams/:team_id/applicants"},{"location":"sftt/sftt-api-spec/#responses_2","text":"","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok_3","text":"{ \"applicants\" : [ { \"userId\" : INT , \"username\" : STRING , }, ... ] }","title":"200 OK"},{"location":"sftt/sftt-api-spec/#post-teamsteam_idapplicantsuser_idapprove","text":"Team Leader only. Approve this applicant's request to join the team. The user_id will be the same as the id returned in the GET applicants API call.","title":"POST /teams/:team_id/applicants/:user_id/approve"},{"location":"sftt/sftt-api-spec/#request_3","text":"No Request body","title":"Request"},{"location":"sftt/sftt-api-spec/#responses_3","text":"","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok_4","text":"This member has joined the team.","title":"200 OK"},{"location":"sftt/sftt-api-spec/#400-bad-request_1","text":"If the team or request specified in the id is invalid OR the user that had created the request no longer exists.","title":"400 BAD REQUEST"},{"location":"sftt/sftt-api-spec/#post-teamsteam_idapplicantsuser_idreject","text":"Team Leader only. Reject this applicant's request to join the team. The user_id will be the same as the id returned in the GET applicants API call.","title":"POST /teams/:team_id/applicants/:user_id/reject"},{"location":"sftt/sftt-api-spec/#request_4","text":"No Request body","title":"Request"},{"location":"sftt/sftt-api-spec/#responses_4","text":"","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok_5","text":"This applicant has been removed from the applicant's list.","title":"200 OK"},{"location":"sftt/sftt-api-spec/#400-bad-request_2","text":"If the team or request specified in the id is invalid OR the user that had created the request no longer exists.","title":"400 BAD REQUEST"},{"location":"sftt/sftt-api-spec/#post-teamsteam_idleave","text":"Leave this team that you are a part of. Cannot be called by the leader of the team.","title":"POST /teams/:team_id/leave"},{"location":"sftt/sftt-api-spec/#request_5","text":"No request body.","title":"Request"},{"location":"sftt/sftt-api-spec/#post-teamsteam_iddisband","text":"Disband this team. Leader only. The team will be removed from the public team list and all other members will now be free to join or create a different team.","title":"POST /teams/:team_id/disband"},{"location":"sftt/sftt-api-spec/#request_6","text":"No request body.","title":"Request"},{"location":"sftt/sftt-api-spec/#post-teamsteam_idmembersmember_idkick","text":"Kicks a member off this team. Leader only. That member is then allowed to join or create any team now.","title":"POST /teams/:team_id/members/:member_id/kick"},{"location":"sftt/sftt-api-spec/#request_7","text":"No request body.","title":"Request"},{"location":"sftt/sftt-api-spec/#post-teamsteam_idtransfer_ownership","text":"Update the team leader. Can only be called by the current leader of the given team.","title":"POST /teams/:team_id/transfer_ownership"},{"location":"sftt/sftt-api-spec/#request_8","text":"{ \"newLeaderId\" : INT }","title":"Request"},{"location":"sftt/sftt-api-spec/#responses_5","text":"","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok_6","text":"Success.","title":"200 OK"},{"location":"sftt/sftt-api-spec/#400-bad-request_3","text":"If the given user ID does not exist, or if the given user is not on the team.","title":"400 Bad Request"},{"location":"sftt/sftt-api-spec/#401-unauthorized_2","text":"If the requesting user is not the team leader.","title":"401 Unauthorized"},{"location":"sftt/sftt-api-spec/#team-and-leaderboard-data","text":"","title":"Team and Leaderboard Data"},{"location":"sftt/sftt-api-spec/#get-teams","text":"Gets a list of teams, names, member count.","title":"GET /teams"},{"location":"sftt/sftt-api-spec/#responses_6","text":"","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok_7","text":"{ \"teams\" : [ { \"id\" : INT , \"name\" : STRING , \"memberCount\" : INT , \"userTeamRole\" : TEAM_ROLE }, ... ], \"rowCount\" : INT }","title":"200 OK"},{"location":"sftt/sftt-api-spec/#get-teamsadmin","text":"Gets a list of teams with their goal data.","title":"GET /teams/admin"},{"location":"sftt/sftt-api-spec/#responses_7","text":"","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok_8","text":"{ \"teams\" : [ { \"id\" : INT , \"name\" : STRING , \"goalCompletionDate\" : TIMESTAMP , \"blocksCompleted\" : INT , \"blocksReserved\" : INT , \"goal\" : INT }, ... ], \"rowCount\" : INT }","title":"200 OK"},{"location":"sftt/sftt-api-spec/#get-teamsteam_id","text":"Gets the information for this specific team. Including the members with how many blocks each one has completed and reserved.","title":"GET /teams/:team_id"},{"location":"sftt/sftt-api-spec/#responses_8","text":"","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok_9","text":"{ \"id\" : INT , \"name\" : STRING , \"bio\" : STRING , \"goal\" INT , \"goalCompleteDate\" : DATE , \"blocksCompleted\" : INT , \"blocksReserved\" : INT , \"userTeamRole\" : TEAM_ROLE , \"applicantsToReview\" : BOOLEAN , \"members\" : [ { \"id\" : INT , \"username\" : STRING , \"blocksCompleted\" : INT , \"blocksReserved\" : INT , \"teamRole\" : INT }, ... ], } The members list is sorted in descending order of number of blocks completed. teamRole is an indicator of the member's role on the team. Currently there are only two roles: general member and team leader. applicantsToReview is a flag that there are people that have applied to the team that the team leader has to review. This will always be false if a non-leader calls this route.","title":"200 OK"},{"location":"sftt/sftt-api-spec/#get-apiv1protectedteamsexport","text":"Export Teams and User information. This is an admin-only route. Returns a text/cvs response that includes every team name, the goal and goal completion date of the team, the time the team was created, every member of each team, the team role of each member, the number of blocks reserved and completed by each user on a team.","title":"GET /api/v1/protected/teams/export"},{"location":"sftt/sftt-api-spec/#responses_9","text":"","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok_10","text":"STRING,STRING,STRING,... STRING,STRING,STRING,... ...","title":"200 OK"},{"location":"sftt/sftt-api-spec/#get-blocks","text":"Gets blocks done, in progress, todo for all of Boston","title":"GET /blocks"},{"location":"sftt/sftt-api-spec/#responses_10","text":"","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok_11","text":"{ \"blocksCompleted\" : INT , \"blocksReserved\" : INT , \"blocksOpen\" : INT }","title":"200 OK"},{"location":"sftt/sftt-api-spec/#get-blocksleaderboard","text":"Gets blocks completed leaderboard for both teams and individuals. Will include up-to the top 10 teams and the top 10 individuals","title":"GET /blocks/leaderboard"},{"location":"sftt/sftt-api-spec/#responses_11","text":"","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok_12","text":"{ \"teams\" : [ { \"id\" : INT , \"name\" : STRING , \"blocksCompleted\" : INT , \"blocksReserved\" : INT }, ... ], \"individuals\" : [ { \"id\" : INT , \"username\" : STRING , \"blocksCompleted\" : INT , \"blocksReserved\" : INT }, ... ] }","title":"200 OK"},{"location":"sftt/sftt-api-spec/#get-apiv1protectedblocksreserved","text":"Gets all blocks that are assigned_to the current user that have a status of RESERVED . Including the optional query parameter done=true will also return all blocks that have a status of DONE . Returns a list of block.fid .","title":"GET api/v1/protected/blocks/reserved"},{"location":"sftt/sftt-api-spec/#responses_12","text":"","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok_13","text":"[ STRING , STRING , ... ]","title":"200 OK"},{"location":"sftt/sftt-api-spec/#get-apiv1protectedblocksreservedadmin","text":"Gets all blocks that have a status of RESERVED , in descending order of reservation date. Can only be called by admins.","title":"GET api/v1/protected/blocks/reserved/admin"},{"location":"sftt/sftt-api-spec/#responses_13","text":"","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok_14","text":"{ \"blocks\" : [ { \"fid\" : STRING , \"username\" : STRING , \"dateUpdated\" : TIMESTAMP } ], ... }","title":"200 OK"},{"location":"sftt/sftt-api-spec/#get-apiv1protectedblocksdoneadmin","text":"Gets all blocks that have a status of DONE , in descending order of completion date. Can only be called by admins.","title":"GET api/v1/protected/blocks/done/admin"},{"location":"sftt/sftt-api-spec/#responses_14","text":"","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok_15","text":"{ \"blocks\" : [ { \"fid\" : STRING , \"username\" : STRING , \"dateUpdated\" : TIMESTAMP } ], ... }","title":"200 OK"},{"location":"sftt/sftt-api-spec/#get-apiv1protectedblocksexport","text":"Export Block and User/Team information. This is an admin-only route. Returns a text/csv response that includes every block number, the status of the block, the user that is associated with it (first name, last name, email, username), the time it last updated, and the names of the teams the user is currently on.","title":"GET /api/v1/protected/blocks/export"},{"location":"sftt/sftt-api-spec/#responses_15","text":"","title":"Responses"},{"location":"sftt/sftt-api-spec/#200-ok_16","text":"STRING,STRING,STRING,... STRING,STRING,STRING,... ...","title":"200 OK"},{"location":"sftt/sftt-auth-api/","text":"Login and Token Endpoints Common Headers: For any request with a body it is assumed that this header exists: Content-Type: application/json #### Access Token Composition: ``` json { \"userId\": INT, \"adminLevel\": INT } adminLevel: integer describing the user's privilege level. 1: General Member 2: Admin Note: For any protected route, if the access token included in the request header is expired the backend will return a 401 with the following text indicating that a refresh is necessary. \"Given access token is expired or invalid\" Unprotected Routes These routes are called by a user that is not yet authenticated. **These routes all have the prefix api/v1/ POST user/login Used for logging in. Request Body: { \"email\" : EMAIL , \"password\" : STRING } An EMAIL is a string representing a user's email. Responses 201 Created The username/password combination is valid. Includes distinct access and refresh tokens for the given user. Body: { \"accessToken\" : JWT , \"refreshToken\" : JWT } 400 Bad Request Malformed request. 401 Unauthorized The username/password combination is invalid. POST user/login/refresh Used for getting a new access token. Request Headers: X-Refresh-Token : JWT Responses 201 Created The refresh token is valid and has not yet expired. Response includes a new unique access_token. Body: { \"accessToken\" : JWT , } 401 Unauthorized The refresh token is invalid. DELETE user/login Used for logging out. Request Headers: X-Access-Token : JWT X-Refresh-Token : JWT Responses 204 No Content Logout successful. POST user/signup Used for signing up a new user. Request Body { \"username\" : STRING , \"email\" : EMAIL , \"password\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING } EMAIL: Is a valid email string. PASSWORD: Is a valid password string that is at least 8 characters. Responses 201 Created The username and email are still available, and an account has been successfully created. Body: { \"accessToken\" : JWT , \"refreshToken\" : JWT } 400 Bad Request Malformed request body. 409 Conflict The given email or username is already in use. \"Error creating new user, given email %s already used\" \"Error creating new user, given username %s already used\" POST user/forgot_password/request Used to send a reset password email to a user if they have forgotten their password Request { \"email\" : STRING } Responses 200 OK The email was sent to the user successfully 400 BAD REQUEST The given email is not associated with any user account POST user/forgot_password/reset Used to reset a user's password after they have requested a forget password link Request { \"secret_key\" : STRING , \"new_password\" : STRING } The secret key should be determined by the frontend link that the user clicked from their email. passwords should be strings with length >= 8 characters. Responses 200 OK The user's identity was confirmed and the password was changed successfully. 400 BAD REQUEST The new password that was given is an invalid password. 401 UNAUTHORIZED The given secret key is invalid and does not refer to an account or was created too long ago to be valid. GET user/verify/:secret_key Used for confirming an account's email Request Path Params secret_key: is a secret key randomly generated by the backend and sent to the user by email. Responses 200 OK The user's secret key has been verified. 401 Unauthorized The secret key is invalid or expired. TODO: GET user/create_secret/:user_id Used for creating secret keys for users. Request PATH: GET user/create_secret/:user_id Responses 200 OK A secret key was created and stored for the given user. 400 BAD REQUEST The given user id could not be found. Protected Routes These routes are called by an authenticated user. These routes can only be called with a valid access JWT token specified in the following header. X-Access-Token: JWT-String **These routes all have the prefix api/v1/protected/ DELETE /user Deletes the user that called this route as determined by their access JWT. This route is only implemented to support testing and does not invalidate user access tokens. This is not safe to be called by the frontend client for this reason. Responses 200 OK The user no longer exists POST /user/change_password Allows a user to change their password when already authenticated. Request { \"currentPassword\" : STRING , \"newPassword\" : STRING } passwords should be strings with length >= 8 characters. Responses 200 OK The password change was successful. 400 BAD REQUEST If the request was malformed. 401 Unauthorized The currentPassword does not match the calling user's current password. POST /user/change_username Allows a user to change their username when already authenticated. Request { \"newUsername\" : STRING , \"password\" : STRING } New username must be unique (not already in use by another user). Responses 200 OK The username change was successful. 400 BAD REQUEST If the request was malformed. 401 Unauthorized The password does not match the calling user's current password. 409 Conflict The given newUsername is already in use.","title":"Login and Token Endpoints"},{"location":"sftt/sftt-auth-api/#login-and-token-endpoints","text":"","title":"Login and Token Endpoints"},{"location":"sftt/sftt-auth-api/#common-headers","text":"For any request with a body it is assumed that this header exists: Content-Type: application/json #### Access Token Composition: ``` json { \"userId\": INT, \"adminLevel\": INT } adminLevel: integer describing the user's privilege level. 1: General Member 2: Admin","title":"Common Headers:"},{"location":"sftt/sftt-auth-api/#note","text":"For any protected route, if the access token included in the request header is expired the backend will return a 401 with the following text indicating that a refresh is necessary. \"Given access token is expired or invalid\"","title":"Note:"},{"location":"sftt/sftt-auth-api/#unprotected-routes","text":"These routes are called by a user that is not yet authenticated. **These routes all have the prefix api/v1/","title":"Unprotected Routes"},{"location":"sftt/sftt-auth-api/#post-userlogin","text":"Used for logging in.","title":"POST user/login"},{"location":"sftt/sftt-auth-api/#request","text":"Body: { \"email\" : EMAIL , \"password\" : STRING } An EMAIL is a string representing a user's email.","title":"Request"},{"location":"sftt/sftt-auth-api/#responses","text":"","title":"Responses"},{"location":"sftt/sftt-auth-api/#201-created","text":"The username/password combination is valid. Includes distinct access and refresh tokens for the given user. Body: { \"accessToken\" : JWT , \"refreshToken\" : JWT }","title":"201 Created"},{"location":"sftt/sftt-auth-api/#400-bad-request","text":"Malformed request.","title":"400 Bad Request"},{"location":"sftt/sftt-auth-api/#401-unauthorized","text":"The username/password combination is invalid.","title":"401 Unauthorized"},{"location":"sftt/sftt-auth-api/#post-userloginrefresh","text":"Used for getting a new access token.","title":"POST user/login/refresh"},{"location":"sftt/sftt-auth-api/#request_1","text":"","title":"Request"},{"location":"sftt/sftt-auth-api/#headers","text":"X-Refresh-Token : JWT","title":"Headers:"},{"location":"sftt/sftt-auth-api/#responses_1","text":"","title":"Responses"},{"location":"sftt/sftt-auth-api/#201-created_1","text":"The refresh token is valid and has not yet expired. Response includes a new unique access_token. Body: { \"accessToken\" : JWT , }","title":"201 Created"},{"location":"sftt/sftt-auth-api/#401-unauthorized_1","text":"The refresh token is invalid.","title":"401 Unauthorized"},{"location":"sftt/sftt-auth-api/#delete-userlogin","text":"Used for logging out.","title":"DELETE user/login"},{"location":"sftt/sftt-auth-api/#request_2","text":"Headers: X-Access-Token : JWT X-Refresh-Token : JWT","title":"Request"},{"location":"sftt/sftt-auth-api/#responses_2","text":"","title":"Responses"},{"location":"sftt/sftt-auth-api/#204-no-content","text":"Logout successful.","title":"204 No Content"},{"location":"sftt/sftt-auth-api/#post-usersignup","text":"Used for signing up a new user.","title":"POST user/signup"},{"location":"sftt/sftt-auth-api/#request_3","text":"","title":"Request"},{"location":"sftt/sftt-auth-api/#body","text":"{ \"username\" : STRING , \"email\" : EMAIL , \"password\" : STRING , \"firstName\" : STRING , \"lastName\" : STRING } EMAIL: Is a valid email string. PASSWORD: Is a valid password string that is at least 8 characters.","title":"Body"},{"location":"sftt/sftt-auth-api/#responses_3","text":"","title":"Responses"},{"location":"sftt/sftt-auth-api/#201-created_2","text":"The username and email are still available, and an account has been successfully created. Body: { \"accessToken\" : JWT , \"refreshToken\" : JWT }","title":"201 Created"},{"location":"sftt/sftt-auth-api/#400-bad-request_1","text":"Malformed request body.","title":"400 Bad Request"},{"location":"sftt/sftt-auth-api/#409-conflict","text":"The given email or username is already in use. \"Error creating new user, given email %s already used\" \"Error creating new user, given username %s already used\"","title":"409 Conflict"},{"location":"sftt/sftt-auth-api/#post-userforgot_passwordrequest","text":"Used to send a reset password email to a user if they have forgotten their password","title":"POST user/forgot_password/request"},{"location":"sftt/sftt-auth-api/#request_4","text":"{ \"email\" : STRING }","title":"Request"},{"location":"sftt/sftt-auth-api/#responses_4","text":"","title":"Responses"},{"location":"sftt/sftt-auth-api/#200-ok","text":"The email was sent to the user successfully","title":"200 OK"},{"location":"sftt/sftt-auth-api/#400-bad-request_2","text":"The given email is not associated with any user account","title":"400 BAD REQUEST"},{"location":"sftt/sftt-auth-api/#post-userforgot_passwordreset","text":"Used to reset a user's password after they have requested a forget password link","title":"POST user/forgot_password/reset"},{"location":"sftt/sftt-auth-api/#request_5","text":"{ \"secret_key\" : STRING , \"new_password\" : STRING } The secret key should be determined by the frontend link that the user clicked from their email. passwords should be strings with length >= 8 characters.","title":"Request"},{"location":"sftt/sftt-auth-api/#responses_5","text":"","title":"Responses"},{"location":"sftt/sftt-auth-api/#200-ok_1","text":"The user's identity was confirmed and the password was changed successfully.","title":"200 OK"},{"location":"sftt/sftt-auth-api/#400-bad-request_3","text":"The new password that was given is an invalid password.","title":"400 BAD REQUEST"},{"location":"sftt/sftt-auth-api/#401-unauthorized_2","text":"The given secret key is invalid and does not refer to an account or was created too long ago to be valid.","title":"401 UNAUTHORIZED"},{"location":"sftt/sftt-auth-api/#get-userverifysecret_key","text":"Used for confirming an account's email","title":"GET user/verify/:secret_key"},{"location":"sftt/sftt-auth-api/#request_6","text":"","title":"Request"},{"location":"sftt/sftt-auth-api/#path-params","text":"secret_key: is a secret key randomly generated by the backend and sent to the user by email.","title":"Path Params"},{"location":"sftt/sftt-auth-api/#responses_6","text":"","title":"Responses"},{"location":"sftt/sftt-auth-api/#200-ok_2","text":"The user's secret key has been verified.","title":"200 OK"},{"location":"sftt/sftt-auth-api/#401-unauthorized_3","text":"The secret key is invalid or expired.","title":"401 Unauthorized"},{"location":"sftt/sftt-auth-api/#todo-get-usercreate_secretuser_id","text":"Used for creating secret keys for users.","title":"TODO: GET user/create_secret/:user_id"},{"location":"sftt/sftt-auth-api/#request_7","text":"PATH: GET user/create_secret/:user_id","title":"Request"},{"location":"sftt/sftt-auth-api/#responses_7","text":"","title":"Responses"},{"location":"sftt/sftt-auth-api/#200-ok_3","text":"A secret key was created and stored for the given user.","title":"200 OK"},{"location":"sftt/sftt-auth-api/#400-bad-request_4","text":"The given user id could not be found.","title":"400 BAD REQUEST"},{"location":"sftt/sftt-auth-api/#protected-routes","text":"These routes are called by an authenticated user. These routes can only be called with a valid access JWT token specified in the following header. X-Access-Token: JWT-String **These routes all have the prefix api/v1/protected/","title":"Protected Routes"},{"location":"sftt/sftt-auth-api/#delete-user","text":"Deletes the user that called this route as determined by their access JWT. This route is only implemented to support testing and does not invalidate user access tokens. This is not safe to be called by the frontend client for this reason.","title":"DELETE /user"},{"location":"sftt/sftt-auth-api/#responses_8","text":"","title":"Responses"},{"location":"sftt/sftt-auth-api/#200-ok_4","text":"The user no longer exists","title":"200 OK"},{"location":"sftt/sftt-auth-api/#post-userchange_password","text":"Allows a user to change their password when already authenticated.","title":"POST /user/change_password"},{"location":"sftt/sftt-auth-api/#request_8","text":"{ \"currentPassword\" : STRING , \"newPassword\" : STRING } passwords should be strings with length >= 8 characters.","title":"Request"},{"location":"sftt/sftt-auth-api/#responses_9","text":"","title":"Responses"},{"location":"sftt/sftt-auth-api/#200-ok_5","text":"The password change was successful.","title":"200 OK"},{"location":"sftt/sftt-auth-api/#400-bad-request_5","text":"If the request was malformed.","title":"400 BAD REQUEST"},{"location":"sftt/sftt-auth-api/#401-unauthorized_4","text":"The currentPassword does not match the calling user's current password.","title":"401 Unauthorized"},{"location":"sftt/sftt-auth-api/#post-userchange_username","text":"Allows a user to change their username when already authenticated.","title":"POST /user/change_username"},{"location":"sftt/sftt-auth-api/#request_9","text":"{ \"newUsername\" : STRING , \"password\" : STRING } New username must be unique (not already in use by another user).","title":"Request"},{"location":"sftt/sftt-auth-api/#responses_10","text":"","title":"Responses"},{"location":"sftt/sftt-auth-api/#200-ok_6","text":"The username change was successful.","title":"200 OK"},{"location":"sftt/sftt-auth-api/#400-bad-request_6","text":"If the request was malformed.","title":"400 BAD REQUEST"},{"location":"sftt/sftt-auth-api/#401-unauthorized_5","text":"The password does not match the calling user's current password.","title":"401 Unauthorized"},{"location":"sftt/sftt-auth-api/#409-conflict_1","text":"The given newUsername is already in use.","title":"409 Conflict"}]}